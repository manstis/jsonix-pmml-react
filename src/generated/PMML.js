/* eslint no-undef: "off"*/

var PMML_Module_Factory = function () {
  var PMML = {
    name: 'PMML',
    defaultElementNamespaceURI: 'http:\/\/www.dmg.org\/PMML-4_4',
    typeInfos: [{
        localName: 'Mean',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'constant',
            required: true,
            elementName: 'Constant',
            typeInfo: '.Constant'
          }, {
            name: 'fieldRef',
            required: true,
            elementName: 'FieldRef',
            typeInfo: '.FieldRef'
          }, {
            name: 'normContinuous',
            required: true,
            elementName: 'NormContinuous',
            typeInfo: '.NormContinuous'
          }, {
            name: 'normDiscrete',
            required: true,
            elementName: 'NormDiscrete',
            typeInfo: '.NormDiscrete'
          }, {
            name: 'discretize',
            required: true,
            elementName: 'Discretize',
            typeInfo: '.Discretize'
          }, {
            name: 'mapValues',
            required: true,
            elementName: 'MapValues',
            typeInfo: '.MapValues'
          }, {
            name: 'textIndex',
            required: true,
            elementName: 'TextIndex',
            typeInfo: '.TextIndex'
          }, {
            name: 'apply',
            required: true,
            elementName: 'Apply',
            typeInfo: '.Apply'
          }, {
            name: 'aggregate',
            required: true,
            elementName: 'Aggregate',
            typeInfo: '.Aggregate'
          }, {
            name: 'lag',
            required: true,
            elementName: 'Lag',
            typeInfo: '.Lag'
          }]
      }, {
        localName: 'PMML',
        typeName: null,
        propertyInfos: [{
            name: 'header',
            required: true,
            elementName: 'Header',
            typeInfo: '.Header'
          }, {
            name: 'miningBuildTask',
            elementName: 'MiningBuildTask',
            typeInfo: '.MiningBuildTask'
          }, {
            name: 'dataDictionary',
            required: true,
            elementName: 'DataDictionary',
            typeInfo: '.DataDictionary'
          }, {
            name: 'transformationDictionary',
            elementName: 'TransformationDictionary',
            typeInfo: '.TransformationDictionary'
          }, {
            name: 'anomalyDetectionModelOrAssociationModelOrBayesianNetworkModel',
            minOccurs: 0,
            collection: true,
            elementTypeInfos: [{
                elementName: 'AnomalyDetectionModel',
                typeInfo: '.AnomalyDetectionModel'
              }, {
                elementName: 'AssociationModel',
                typeInfo: '.AssociationModel'
              }, {
                elementName: 'BayesianNetworkModel',
                typeInfo: '.BayesianNetworkModel'
              }, {
                elementName: 'BaselineModel',
                typeInfo: '.BaselineModel'
              }, {
                elementName: 'ClusteringModel',
                typeInfo: '.ClusteringModel'
              }, {
                elementName: 'GaussianProcessModel',
                typeInfo: '.GaussianProcessModel'
              }, {
                elementName: 'GeneralRegressionModel',
                typeInfo: '.GeneralRegressionModel'
              }, {
                elementName: 'MiningModel',
                typeInfo: '.MiningModel'
              }, {
                elementName: 'NaiveBayesModel',
                typeInfo: '.NaiveBayesModel'
              }, {
                elementName: 'NearestNeighborModel',
                typeInfo: '.NearestNeighborModel'
              }, {
                elementName: 'NeuralNetwork',
                typeInfo: '.NeuralNetwork'
              }, {
                elementName: 'RegressionModel',
                typeInfo: '.RegressionModel'
              }, {
                elementName: 'RuleSetModel',
                typeInfo: '.RuleSetModel'
              }, {
                elementName: 'SequenceModel',
                typeInfo: '.SequenceModel'
              }, {
                elementName: 'Scorecard',
                typeInfo: '.Scorecard'
              }, {
                elementName: 'SupportVectorMachineModel',
                typeInfo: '.SupportVectorMachineModel'
              }, {
                elementName: 'TextModel',
                typeInfo: '.TextModel'
              }, {
                elementName: 'TimeSeriesModel',
                typeInfo: '.TimeSeriesModel'
              }, {
                elementName: 'TreeModel',
                typeInfo: '.TreeModel'
              }],
            type: 'elements'
          }, {
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'version',
            required: true,
            attributeName: {
              localPart: 'version'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'NonseasonalComponent',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'ar',
            elementName: 'AR',
            typeInfo: '.AR'
          }, {
            name: 'ma',
            elementName: 'MA',
            typeInfo: '.MA'
          }, {
            name: 'p',
            typeInfo: 'NonNegativeInteger',
            attributeName: {
              localPart: 'p'
            },
            type: 'attribute'
          }, {
            name: 'd',
            typeInfo: 'NonNegativeInteger',
            attributeName: {
              localPart: 'd'
            },
            type: 'attribute'
          }, {
            name: 'q',
            typeInfo: 'NonNegativeInteger',
            attributeName: {
              localPart: 'q'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'LinearNorm',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'orig',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'orig'
            },
            type: 'attribute'
          }, {
            name: 'norm',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'norm'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'Neuron',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'con',
            required: true,
            collection: true,
            elementName: 'Con',
            typeInfo: '.Con'
          }, {
            name: 'id',
            required: true,
            attributeName: {
              localPart: 'id'
            },
            type: 'attribute'
          }, {
            name: 'bias',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'bias'
            },
            type: 'attribute'
          }, {
            name: 'width',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'width'
            },
            type: 'attribute'
          }, {
            name: 'altitude',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'altitude'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'Partition',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'partitionFieldStats',
            minOccurs: 0,
            collection: true,
            elementName: 'PartitionFieldStats',
            typeInfo: '.PartitionFieldStats'
          }, {
            name: 'name',
            required: true,
            attributeName: {
              localPart: 'name'
            },
            type: 'attribute'
          }, {
            name: 'size',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'size'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'ARMAPart',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'ar',
            required: true,
            elementName: 'AR',
            typeInfo: '.AR'
          }, {
            name: 'ma',
            required: true,
            elementName: 'MA',
            typeInfo: '.MA'
          }, {
            name: 'constant',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'constant'
            },
            type: 'attribute'
          }, {
            name: 'p',
            required: true,
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'p'
            },
            type: 'attribute'
          }, {
            name: 'q',
            required: true,
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'q'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'ModelExplanation',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'predictiveModelQuality',
            minOccurs: 0,
            collection: true,
            elementName: 'PredictiveModelQuality',
            typeInfo: '.PredictiveModelQuality'
          }, {
            name: 'clusteringModelQuality',
            minOccurs: 0,
            collection: true,
            elementName: 'ClusteringModelQuality',
            typeInfo: '.ClusteringModelQuality'
          }, {
            name: 'correlations',
            elementName: 'Correlations',
            typeInfo: '.Correlations'
          }]
      }, {
        localName: 'Application',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'name',
            required: true,
            attributeName: {
              localPart: 'name'
            },
            type: 'attribute'
          }, {
            name: 'version',
            attributeName: {
              localPart: 'version'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'PCell',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'targetCategory',
            attributeName: {
              localPart: 'targetCategory'
            },
            type: 'attribute'
          }, {
            name: 'parameterName',
            required: true,
            attributeName: {
              localPart: 'parameterName'
            },
            type: 'attribute'
          }, {
            name: 'beta',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'beta'
            },
            type: 'attribute'
          }, {
            name: 'df',
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'df'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'CorrelationMethods',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'matrix',
            required: true,
            elementName: 'Matrix',
            typeInfo: '.Matrix'
          }]
      }, {
        localName: 'False',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }]
      }, {
        localName: 'LognormalDistributionForBN',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'mean',
            required: true,
            elementName: 'Mean',
            typeInfo: '.Mean'
          }, {
            name: 'variance',
            required: true,
            elementName: 'Variance',
            typeInfo: '.Variance'
          }]
      }, {
        localName: 'Output',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'outputField',
            required: true,
            collection: true,
            elementName: 'OutputField',
            typeInfo: '.OutputField'
          }]
      }, {
        localName: 'Theta',
        typeName: null,
        propertyInfos: [{
            name: 'i',
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'i'
            },
            type: 'attribute'
          }, {
            name: 'j',
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'j'
            },
            type: 'attribute'
          }, {
            name: 'theta',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'theta'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'Coefficients',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'coefficient',
            required: true,
            collection: true,
            elementName: 'Coefficient',
            typeInfo: '.Coefficient'
          }, {
            name: 'numberOfCoefficients',
            typeInfo: 'NonNegativeInteger',
            attributeName: {
              localPart: 'numberOfCoefficients'
            },
            type: 'attribute'
          }, {
            name: 'absoluteValue',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'absoluteValue'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'Cluster',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'kohonenMap',
            elementName: 'KohonenMap',
            typeInfo: '.KohonenMap'
          }, {
            name: 'array',
            required: true,
            elementName: 'Array',
            typeInfo: '.ArrayType'
          }, {
            name: 'partition',
            elementName: 'Partition',
            typeInfo: '.Partition'
          }, {
            name: 'covariances',
            elementName: 'Covariances',
            typeInfo: '.Covariances'
          }, {
            name: 'id',
            attributeName: {
              localPart: 'id'
            },
            type: 'attribute'
          }, {
            name: 'name',
            attributeName: {
              localPart: 'name'
            },
            type: 'attribute'
          }, {
            name: 'size',
            typeInfo: 'NonNegativeInteger',
            attributeName: {
              localPart: 'size'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'MiningBuildTask',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }]
      }, {
        localName: 'RuleSetModel',
        typeName: null,
        propertyInfos: [{
            name: 'content',
            required: true,
            minOccurs: 2,
            collection: true,
            mixed: false,
            allowDom: false,
            elementTypeInfos: [{
                elementName: 'ModelExplanation',
                typeInfo: '.ModelExplanation'
              }, {
                elementName: 'ModelVerification',
                typeInfo: '.ModelVerification'
              }, {
                elementName: 'LocalTransformations',
                typeInfo: '.LocalTransformations'
              }, {
                elementName: 'Extension',
                typeInfo: '.Extension'
              }, {
                elementName: 'RuleSet',
                typeInfo: '.RuleSet'
              }, {
                elementName: 'ModelStats',
                typeInfo: '.ModelStats'
              }, {
                elementName: 'Output',
                typeInfo: '.Output'
              }, {
                elementName: 'Targets',
                typeInfo: '.Targets'
              }, {
                elementName: 'MiningSchema',
                typeInfo: '.MiningSchema'
              }],
            type: 'elementRefs'
          }, {
            name: 'modelName',
            attributeName: {
              localPart: 'modelName'
            },
            type: 'attribute'
          }, {
            name: 'functionName',
            required: true,
            attributeName: {
              localPart: 'functionName'
            },
            type: 'attribute'
          }, {
            name: 'algorithmName',
            attributeName: {
              localPart: 'algorithmName'
            },
            type: 'attribute'
          }, {
            name: 'isScorable',
            typeInfo: 'Boolean',
            attributeName: {
              localPart: 'isScorable'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'NumericPredictor',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'name',
            required: true,
            attributeName: {
              localPart: 'name'
            },
            type: 'attribute'
          }, {
            name: 'exponent',
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'exponent'
            },
            type: 'attribute'
          }, {
            name: 'coefficient',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'coefficient'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'NearestNeighborModel',
        typeName: null,
        propertyInfos: [{
            name: 'content',
            required: true,
            minOccurs: 4,
            collection: true,
            mixed: false,
            allowDom: false,
            elementTypeInfos: [{
                elementName: 'ModelExplanation',
                typeInfo: '.ModelExplanation'
              }, {
                elementName: 'ModelVerification',
                typeInfo: '.ModelVerification'
              }, {
                elementName: 'KNNInputs',
                typeInfo: '.KNNInputs'
              }, {
                elementName: 'LocalTransformations',
                typeInfo: '.LocalTransformations'
              }, {
                elementName: 'Extension',
                typeInfo: '.Extension'
              }, {
                elementName: 'TrainingInstances',
                typeInfo: '.TrainingInstances'
              }, {
                elementName: 'ComparisonMeasure',
                typeInfo: '.ComparisonMeasure'
              }, {
                elementName: 'ModelStats',
                typeInfo: '.ModelStats'
              }, {
                elementName: 'Output',
                typeInfo: '.Output'
              }, {
                elementName: 'Targets',
                typeInfo: '.Targets'
              }, {
                elementName: 'MiningSchema',
                typeInfo: '.MiningSchema'
              }],
            type: 'elementRefs'
          }, {
            name: 'modelName',
            attributeName: {
              localPart: 'modelName'
            },
            type: 'attribute'
          }, {
            name: 'functionName',
            required: true,
            attributeName: {
              localPart: 'functionName'
            },
            type: 'attribute'
          }, {
            name: 'algorithmName',
            attributeName: {
              localPart: 'algorithmName'
            },
            type: 'attribute'
          }, {
            name: 'numberOfNeighbors',
            required: true,
            typeInfo: 'NonNegativeInteger',
            attributeName: {
              localPart: 'numberOfNeighbors'
            },
            type: 'attribute'
          }, {
            name: 'continuousScoringMethod',
            attributeName: {
              localPart: 'continuousScoringMethod'
            },
            type: 'attribute'
          }, {
            name: 'categoricalScoringMethod',
            attributeName: {
              localPart: 'categoricalScoringMethod'
            },
            type: 'attribute'
          }, {
            name: 'instanceIdVariable',
            attributeName: {
              localPart: 'instanceIdVariable'
            },
            type: 'attribute'
          }, {
            name: 'threshold',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'threshold'
            },
            type: 'attribute'
          }, {
            name: 'isScorable',
            typeInfo: 'Boolean',
            attributeName: {
              localPart: 'isScorable'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'ModelStats',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'univariateStats',
            minOccurs: 0,
            collection: true,
            elementName: 'UnivariateStats',
            typeInfo: '.UnivariateStats'
          }, {
            name: 'multivariateStats',
            minOccurs: 0,
            collection: true,
            elementName: 'MultivariateStats',
            typeInfo: '.MultivariateStats'
          }]
      }, {
        localName: 'SimpleSetPredicate',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'array',
            required: true,
            elementName: 'Array',
            typeInfo: '.ArrayType'
          }, {
            name: 'field',
            required: true,
            attributeName: {
              localPart: 'field'
            },
            type: 'attribute'
          }, {
            name: 'booleanOperator',
            required: true,
            attributeName: {
              localPart: 'booleanOperator'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'MACoefficients',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'array',
            required: true,
            elementName: 'Array',
            typeInfo: '.ArrayType'
          }]
      }, {
        localName: 'MaximumLikelihoodStat',
        typeName: null,
        propertyInfos: [{
            name: 'kalmanState',
            required: true,
            elementName: 'KalmanState',
            typeInfo: '.KalmanState'
          }, {
            name: 'thetaRecursionState',
            required: true,
            elementName: 'ThetaRecursionState',
            typeInfo: '.ThetaRecursionState'
          }, {
            name: 'method',
            required: true,
            attributeName: {
              localPart: 'method'
            },
            type: 'attribute'
          }, {
            name: 'periodDeficit',
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'periodDeficit'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'FactorList',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'predictor',
            minOccurs: 0,
            collection: true,
            elementName: 'Predictor',
            typeInfo: '.Predictor'
          }]
      }, {
        localName: 'COUNTTABLETYPE',
        typeName: 'COUNT-TABLE-TYPE',
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'fieldValue',
            required: true,
            collection: true,
            elementName: 'FieldValue',
            typeInfo: '.FieldValue'
          }, {
            name: 'fieldValueCount',
            required: true,
            collection: true,
            elementName: 'FieldValueCount',
            typeInfo: '.FieldValueCount'
          }, {
            name: 'sample',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'sample'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'Con',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'from',
            required: true,
            attributeName: {
              localPart: 'from'
            },
            type: 'attribute'
          }, {
            name: 'weight',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'weight'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'TimeSeriesModel',
        typeName: null,
        propertyInfos: [{
            name: 'content',
            required: true,
            collection: true,
            mixed: false,
            allowDom: false,
            elementTypeInfos: [{
                elementName: 'ModelExplanation',
                typeInfo: '.ModelExplanation'
              }, {
                elementName: 'ModelVerification',
                typeInfo: '.ModelVerification'
              }, {
                elementName: 'LocalTransformations',
                typeInfo: '.LocalTransformations'
              }, {
                elementName: 'ExponentialSmoothing',
                typeInfo: '.ExponentialSmoothing'
              }, {
                elementName: 'Extension',
                typeInfo: '.Extension'
              }, {
                elementName: 'GARCH',
                typeInfo: '.GARCH'
              }, {
                elementName: 'ARIMA',
                typeInfo: '.ARIMA'
              }, {
                elementName: 'Output',
                typeInfo: '.Output'
              }, {
                elementName: 'StateSpaceModel',
                typeInfo: '.StateSpaceModel'
              }, {
                elementName: 'MiningSchema',
                typeInfo: '.MiningSchema'
              }, {
                elementName: 'SeasonalTrendDecomposition',
                typeInfo: 'AnyType'
              }, {
                elementName: 'TimeSeries',
                typeInfo: '.TimeSeries'
              }, {
                elementName: 'SpectralAnalysis',
                typeInfo: 'AnyType'
              }, {
                elementName: 'ModelStats',
                typeInfo: '.ModelStats'
              }],
            type: 'elementRefs'
          }, {
            name: 'modelName',
            attributeName: {
              localPart: 'modelName'
            },
            type: 'attribute'
          }, {
            name: 'functionName',
            required: true,
            attributeName: {
              localPart: 'functionName'
            },
            type: 'attribute'
          }, {
            name: 'algorithmName',
            attributeName: {
              localPart: 'algorithmName'
            },
            type: 'attribute'
          }, {
            name: 'bestFit',
            required: true,
            attributeName: {
              localPart: 'bestFit'
            },
            type: 'attribute'
          }, {
            name: 'isScorable',
            typeInfo: 'Boolean',
            attributeName: {
              localPart: 'isScorable'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'SimpleRule',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'simplePredicate',
            required: true,
            elementName: 'SimplePredicate',
            typeInfo: '.SimplePredicate'
          }, {
            name: 'compoundPredicate',
            required: true,
            elementName: 'CompoundPredicate',
            typeInfo: '.CompoundPredicate'
          }, {
            name: 'simpleSetPredicate',
            required: true,
            elementName: 'SimpleSetPredicate',
            typeInfo: '.SimpleSetPredicate'
          }, {
            name: '_true',
            required: true,
            elementName: 'True',
            typeInfo: '.True'
          }, {
            name: '_false',
            required: true,
            elementName: 'False',
            typeInfo: '.False'
          }, {
            name: 'scoreDistribution',
            minOccurs: 0,
            collection: true,
            elementName: 'ScoreDistribution',
            typeInfo: '.ScoreDistribution'
          }, {
            name: 'id',
            attributeName: {
              localPart: 'id'
            },
            type: 'attribute'
          }, {
            name: 'score',
            required: true,
            attributeName: {
              localPart: 'score'
            },
            type: 'attribute'
          }, {
            name: 'recordCount',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'recordCount'
            },
            type: 'attribute'
          }, {
            name: 'nbCorrect',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'nbCorrect'
            },
            type: 'attribute'
          }, {
            name: 'confidence',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'confidence'
            },
            type: 'attribute'
          }, {
            name: 'weight',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'weight'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'GARCH',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'armaPart',
            required: true,
            elementName: 'ARMAPart',
            typeInfo: '.ARMAPart'
          }, {
            name: 'garchPart',
            required: true,
            elementName: 'GARCHPart',
            typeInfo: '.GARCHPart'
          }]
      }, {
        localName: 'PoissonDistribution',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'mean',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'mean'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'Segment',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'simplePredicate',
            required: true,
            elementName: 'SimplePredicate',
            typeInfo: '.SimplePredicate'
          }, {
            name: 'compoundPredicate',
            required: true,
            elementName: 'CompoundPredicate',
            typeInfo: '.CompoundPredicate'
          }, {
            name: 'simpleSetPredicate',
            required: true,
            elementName: 'SimpleSetPredicate',
            typeInfo: '.SimpleSetPredicate'
          }, {
            name: '_true',
            required: true,
            elementName: 'True',
            typeInfo: '.True'
          }, {
            name: '_false',
            required: true,
            elementName: 'False',
            typeInfo: '.False'
          }, {
            name: 'anomalyDetectionModel',
            required: true,
            elementName: 'AnomalyDetectionModel',
            typeInfo: '.AnomalyDetectionModel'
          }, {
            name: 'associationModel',
            required: true,
            elementName: 'AssociationModel',
            typeInfo: '.AssociationModel'
          }, {
            name: 'bayesianNetworkModel',
            required: true,
            elementName: 'BayesianNetworkModel',
            typeInfo: '.BayesianNetworkModel'
          }, {
            name: 'baselineModel',
            required: true,
            elementName: 'BaselineModel',
            typeInfo: '.BaselineModel'
          }, {
            name: 'clusteringModel',
            required: true,
            elementName: 'ClusteringModel',
            typeInfo: '.ClusteringModel'
          }, {
            name: 'gaussianProcessModel',
            required: true,
            elementName: 'GaussianProcessModel',
            typeInfo: '.GaussianProcessModel'
          }, {
            name: 'generalRegressionModel',
            required: true,
            elementName: 'GeneralRegressionModel',
            typeInfo: '.GeneralRegressionModel'
          }, {
            name: 'miningModel',
            required: true,
            elementName: 'MiningModel',
            typeInfo: '.MiningModel'
          }, {
            name: 'naiveBayesModel',
            required: true,
            elementName: 'NaiveBayesModel',
            typeInfo: '.NaiveBayesModel'
          }, {
            name: 'nearestNeighborModel',
            required: true,
            elementName: 'NearestNeighborModel',
            typeInfo: '.NearestNeighborModel'
          }, {
            name: 'neuralNetwork',
            required: true,
            elementName: 'NeuralNetwork',
            typeInfo: '.NeuralNetwork'
          }, {
            name: 'regressionModel',
            required: true,
            elementName: 'RegressionModel',
            typeInfo: '.RegressionModel'
          }, {
            name: 'ruleSetModel',
            required: true,
            elementName: 'RuleSetModel',
            typeInfo: '.RuleSetModel'
          }, {
            name: 'sequenceModel',
            required: true,
            elementName: 'SequenceModel',
            typeInfo: '.SequenceModel'
          }, {
            name: 'scorecard',
            required: true,
            elementName: 'Scorecard',
            typeInfo: '.Scorecard'
          }, {
            name: 'supportVectorMachineModel',
            required: true,
            elementName: 'SupportVectorMachineModel',
            typeInfo: '.SupportVectorMachineModel'
          }, {
            name: 'textModel',
            required: true,
            elementName: 'TextModel',
            typeInfo: '.TextModel'
          }, {
            name: 'timeSeriesModel',
            required: true,
            elementName: 'TimeSeriesModel',
            typeInfo: '.TimeSeriesModel'
          }, {
            name: 'treeModel',
            required: true,
            elementName: 'TreeModel',
            typeInfo: '.TreeModel'
          }, {
            name: 'variableWeight',
            elementName: 'VariableWeight',
            typeInfo: '.VariableWeight'
          }, {
            name: 'id',
            attributeName: {
              localPart: 'id'
            },
            type: 'attribute'
          }, {
            name: 'weight',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'weight'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'ContStats',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'interval',
            minOccurs: 0,
            collection: true,
            elementName: 'Interval',
            typeInfo: '.Interval'
          }, {
            name: 'numarray',
            required: true,
            maxOccurs: 3,
            collection: true,
            elementName: 'Array',
            typeInfo: '.ArrayType'
          }, {
            name: 'totalValuesSum',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'totalValuesSum'
            },
            type: 'attribute'
          }, {
            name: 'totalSquaresSum',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'totalSquaresSum'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'PolynomialKernelType',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'description',
            attributeName: {
              localPart: 'description'
            },
            type: 'attribute'
          }, {
            name: 'gamma',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'gamma'
            },
            type: 'attribute'
          }, {
            name: 'coef0',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'coef0'
            },
            type: 'attribute'
          }, {
            name: 'degree',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'degree'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'AbsoluteExponentialKernel',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'lambda',
            minOccurs: 0,
            collection: true,
            elementName: 'Lambda',
            typeInfo: '.Lambda'
          }, {
            name: 'description',
            attributeName: {
              localPart: 'description'
            },
            type: 'attribute'
          }, {
            name: 'gamma',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'gamma'
            },
            type: 'attribute'
          }, {
            name: 'noiseVariance',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'noiseVariance'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'UnivariateStats',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'counts',
            elementName: 'Counts',
            typeInfo: '.Counts'
          }, {
            name: 'numericInfo',
            elementName: 'NumericInfo',
            typeInfo: '.NumericInfo'
          }, {
            name: 'discrStats',
            elementName: 'DiscrStats',
            typeInfo: '.DiscrStats'
          }, {
            name: 'contStats',
            elementName: 'ContStats',
            typeInfo: '.ContStats'
          }, {
            name: 'anova',
            elementName: 'Anova',
            typeInfo: '.Anova'
          }, {
            name: 'field',
            attributeName: {
              localPart: 'field'
            },
            type: 'attribute'
          }, {
            name: 'weighted',
            attributeName: {
              localPart: 'weighted'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'NumericInfo',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'quantile',
            minOccurs: 0,
            collection: true,
            elementName: 'Quantile',
            typeInfo: '.Quantile'
          }, {
            name: 'minimum',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'minimum'
            },
            type: 'attribute'
          }, {
            name: 'maximum',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'maximum'
            },
            type: 'attribute'
          }, {
            name: 'mean',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'mean'
            },
            type: 'attribute'
          }, {
            name: 'standardDeviation',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'standardDeviation'
            },
            type: 'attribute'
          }, {
            name: 'median',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'median'
            },
            type: 'attribute'
          }, {
            name: 'interQuartileRange',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'interQuartileRange'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'TextIndexNormalization',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'tableLocator',
            required: true,
            elementName: 'TableLocator',
            typeInfo: '.TableLocator'
          }, {
            name: 'inlineTable',
            required: true,
            elementName: 'InlineTable',
            typeInfo: '.InlineTable'
          }, {
            name: 'inField',
            attributeName: {
              localPart: 'inField'
            },
            type: 'attribute'
          }, {
            name: 'outField',
            attributeName: {
              localPart: 'outField'
            },
            type: 'attribute'
          }, {
            name: 'regexField',
            attributeName: {
              localPart: 'regexField'
            },
            type: 'attribute'
          }, {
            name: 'recursive',
            typeInfo: 'Boolean',
            attributeName: {
              localPart: 'recursive'
            },
            type: 'attribute'
          }, {
            name: 'isCaseSensitive',
            typeInfo: 'Boolean',
            attributeName: {
              localPart: 'isCaseSensitive'
            },
            type: 'attribute'
          }, {
            name: 'maxLevenshteinDistance',
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'maxLevenshteinDistance'
            },
            type: 'attribute'
          }, {
            name: 'wordSeparatorCharacterRE',
            attributeName: {
              localPart: 'wordSeparatorCharacterRE'
            },
            type: 'attribute'
          }, {
            name: 'tokenize',
            typeInfo: 'Boolean',
            attributeName: {
              localPart: 'tokenize'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'True',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }]
      }, {
        localName: 'Regression',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'output',
            elementName: 'Output',
            typeInfo: '.Output'
          }, {
            name: 'modelStats',
            elementName: 'ModelStats',
            typeInfo: '.ModelStats'
          }, {
            name: 'targets',
            elementName: 'Targets',
            typeInfo: '.Targets'
          }, {
            name: 'localTransformations',
            elementName: 'LocalTransformations',
            typeInfo: '.LocalTransformations'
          }, {
            name: 'resultField',
            minOccurs: 0,
            collection: true,
            elementName: 'ResultField',
            typeInfo: '.ResultField'
          }, {
            name: 'regressionTable',
            required: true,
            collection: true,
            elementName: 'RegressionTable',
            typeInfo: '.RegressionTable'
          }, {
            name: 'modelName',
            attributeName: {
              localPart: 'modelName'
            },
            type: 'attribute'
          }, {
            name: 'functionName',
            required: true,
            attributeName: {
              localPart: 'functionName'
            },
            type: 'attribute'
          }, {
            name: 'algorithmName',
            attributeName: {
              localPart: 'algorithmName'
            },
            type: 'attribute'
          }, {
            name: 'normalizationMethod',
            attributeName: {
              localPart: 'normalizationMethod'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'KalmanState',
        typeName: null,
        propertyInfos: [{
            name: 'finalOmega',
            required: true,
            elementName: 'FinalOmega',
            typeInfo: '.FinalOmega'
          }, {
            name: 'finalStateVector',
            required: true,
            elementName: 'FinalStateVector',
            typeInfo: '.FinalStateVector'
          }, {
            name: 'hVector',
            elementName: 'HVector',
            typeInfo: '.HVector'
          }]
      }, {
        localName: 'Scorecard',
        typeName: null,
        propertyInfos: [{
            name: 'content',
            required: true,
            minOccurs: 2,
            collection: true,
            mixed: false,
            allowDom: false,
            elementTypeInfos: [{
                elementName: 'ModelExplanation',
                typeInfo: '.ModelExplanation'
              }, {
                elementName: 'Characteristics',
                typeInfo: '.Characteristics'
              }, {
                elementName: 'ModelVerification',
                typeInfo: '.ModelVerification'
              }, {
                elementName: 'LocalTransformations',
                typeInfo: '.LocalTransformations'
              }, {
                elementName: 'Extension',
                typeInfo: '.Extension'
              }, {
                elementName: 'ModelStats',
                typeInfo: '.ModelStats'
              }, {
                elementName: 'Output',
                typeInfo: '.Output'
              }, {
                elementName: 'Targets',
                typeInfo: '.Targets'
              }, {
                elementName: 'MiningSchema',
                typeInfo: '.MiningSchema'
              }],
            type: 'elementRefs'
          }, {
            name: 'modelName',
            attributeName: {
              localPart: 'modelName'
            },
            type: 'attribute'
          }, {
            name: 'functionName',
            required: true,
            attributeName: {
              localPart: 'functionName'
            },
            type: 'attribute'
          }, {
            name: 'algorithmName',
            attributeName: {
              localPart: 'algorithmName'
            },
            type: 'attribute'
          }, {
            name: 'initialScore',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'initialScore'
            },
            type: 'attribute'
          }, {
            name: 'useReasonCodes',
            typeInfo: 'Boolean',
            attributeName: {
              localPart: 'useReasonCodes'
            },
            type: 'attribute'
          }, {
            name: 'reasonCodeAlgorithm',
            attributeName: {
              localPart: 'reasonCodeAlgorithm'
            },
            type: 'attribute'
          }, {
            name: 'baselineScore',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'baselineScore'
            },
            type: 'attribute'
          }, {
            name: 'baselineMethod',
            attributeName: {
              localPart: 'baselineMethod'
            },
            type: 'attribute'
          }, {
            name: 'isScorable',
            typeInfo: 'Boolean',
            attributeName: {
              localPart: 'isScorable'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'DiscretizeBin',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'interval',
            required: true,
            elementName: 'Interval',
            typeInfo: '.Interval'
          }, {
            name: 'binValue',
            required: true,
            attributeName: {
              localPart: 'binValue'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'SquaredEuclidean',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }]
      }, {
        localName: 'Coefficient',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'value',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'value'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'Categories',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'category',
            required: true,
            collection: true,
            elementName: 'Category',
            typeInfo: '.Category'
          }]
      }, {
        localName: 'VectorFields',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'fieldRefOrCategoricalPredictor',
            required: true,
            collection: true,
            elementTypeInfos: [{
                elementName: 'FieldRef',
                typeInfo: '.FieldRef'
              }, {
                elementName: 'CategoricalPredictor',
                typeInfo: '.CategoricalPredictor'
              }],
            type: 'elements'
          }, {
            name: 'numberOfFields',
            typeInfo: 'NonNegativeInteger',
            attributeName: {
              localPart: 'numberOfFields'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'RegressorValues',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'timeSeries',
            elementName: 'TimeSeries',
            typeInfo: '.TimeSeries'
          }, {
            name: 'trendCoefficients',
            elementName: 'TrendCoefficients',
            typeInfo: '.TrendCoefficients'
          }, {
            name: 'transferFunctionValues',
            elementName: 'TransferFunctionValues',
            typeInfo: '.TransferFunctionValues'
          }]
      }, {
        localName: 'ClusteringModel',
        typeName: null,
        propertyInfos: [{
            name: 'content',
            required: true,
            minOccurs: 4,
            collection: true,
            mixed: false,
            allowDom: false,
            elementTypeInfos: [{
                elementName: 'ModelExplanation',
                typeInfo: '.ModelExplanation'
              }, {
                elementName: 'ModelVerification',
                typeInfo: '.ModelVerification'
              }, {
                elementName: 'MissingValueWeights',
                typeInfo: '.MissingValueWeights'
              }, {
                elementName: 'LocalTransformations',
                typeInfo: '.LocalTransformations'
              }, {
                elementName: 'Extension',
                typeInfo: '.Extension'
              }, {
                elementName: 'ComparisonMeasure',
                typeInfo: '.ComparisonMeasure'
              }, {
                elementName: 'ModelStats',
                typeInfo: '.ModelStats'
              }, {
                elementName: 'Output',
                typeInfo: '.Output'
              }, {
                elementName: 'Cluster',
                typeInfo: '.Cluster'
              }, {
                elementName: 'MiningSchema',
                typeInfo: '.MiningSchema'
              }, {
                elementName: 'ClusteringField',
                typeInfo: '.ClusteringField'
              }],
            type: 'elementRefs'
          }, {
            name: 'modelName',
            attributeName: {
              localPart: 'modelName'
            },
            type: 'attribute'
          }, {
            name: 'functionName',
            required: true,
            attributeName: {
              localPart: 'functionName'
            },
            type: 'attribute'
          }, {
            name: 'algorithmName',
            attributeName: {
              localPart: 'algorithmName'
            },
            type: 'attribute'
          }, {
            name: 'modelClass',
            required: true,
            attributeName: {
              localPart: 'modelClass'
            },
            type: 'attribute'
          }, {
            name: 'numberOfClusters',
            required: true,
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'numberOfClusters'
            },
            type: 'attribute'
          }, {
            name: 'isScorable',
            typeInfo: 'Boolean',
            attributeName: {
              localPart: 'isScorable'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'SupportVector',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'vectorId',
            required: true,
            attributeName: {
              localPart: 'vectorId'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'MiningModel',
        typeName: null,
        propertyInfos: [{
            name: 'content',
            required: true,
            collection: true,
            mixed: false,
            allowDom: false,
            elementTypeInfos: [{
                elementName: 'ModelExplanation',
                typeInfo: '.ModelExplanation'
              }, {
                elementName: 'ModelVerification',
                typeInfo: '.ModelVerification'
              }, {
                elementName: 'DecisionTree',
                typeInfo: '.DecisionTree'
              }, {
                elementName: 'LocalTransformations',
                typeInfo: '.LocalTransformations'
              }, {
                elementName: 'Extension',
                typeInfo: '.Extension'
              }, {
                elementName: 'ModelStats',
                typeInfo: '.ModelStats'
              }, {
                elementName: 'Regression',
                typeInfo: '.Regression'
              }, {
                elementName: 'Output',
                typeInfo: '.Output'
              }, {
                elementName: 'Targets',
                typeInfo: '.Targets'
              }, {
                elementName: 'MiningSchema',
                typeInfo: '.MiningSchema'
              }, {
                elementName: 'Segmentation',
                typeInfo: '.Segmentation'
              }],
            type: 'elementRefs'
          }, {
            name: 'modelName',
            attributeName: {
              localPart: 'modelName'
            },
            type: 'attribute'
          }, {
            name: 'functionName',
            required: true,
            attributeName: {
              localPart: 'functionName'
            },
            type: 'attribute'
          }, {
            name: 'algorithmName',
            attributeName: {
              localPart: 'algorithmName'
            },
            type: 'attribute'
          }, {
            name: 'isScorable',
            typeInfo: 'Boolean',
            attributeName: {
              localPart: 'isScorable'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'Chebychev',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }]
      }, {
        localName: 'InstanceFields',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'instanceField',
            required: true,
            collection: true,
            elementName: 'InstanceField',
            typeInfo: '.InstanceField'
          }]
      }, {
        localName: 'Parameter',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'name',
            required: true,
            attributeName: {
              localPart: 'name'
            },
            type: 'attribute'
          }, {
            name: 'label',
            attributeName: {
              localPart: 'label'
            },
            type: 'attribute'
          }, {
            name: 'referencePoint',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'referencePoint'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'NormDiscrete',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'field',
            required: true,
            attributeName: {
              localPart: 'field'
            },
            type: 'attribute'
          }, {
            name: 'value',
            required: true,
            attributeName: {
              localPart: 'value'
            },
            type: 'attribute'
          }, {
            name: 'mapMissingTo',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'mapMissingTo'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'MA',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'maCoefficients',
            elementName: 'MACoefficients',
            typeInfo: '.MACoefficients'
          }, {
            name: 'residuals',
            elementName: 'Residuals',
            typeInfo: '.Residuals'
          }]
      }, {
        localName: 'TriangularDistributionForBN',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'mean',
            required: true,
            elementName: 'Mean',
            typeInfo: '.Mean'
          }, {
            name: 'lower',
            required: true,
            elementName: 'Lower',
            typeInfo: '.Lower'
          }, {
            name: 'upper',
            required: true,
            elementName: 'Upper',
            typeInfo: '.Upper'
          }]
      }, {
        localName: 'TextModelSimiliarity',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'similarityType',
            attributeName: {
              localPart: 'similarityType'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'NormContinuous',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'linearNorm',
            required: true,
            minOccurs: 2,
            collection: true,
            elementName: 'LinearNorm',
            typeInfo: '.LinearNorm'
          }, {
            name: 'mapMissingTo',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'mapMissingTo'
            },
            type: 'attribute'
          }, {
            name: 'field',
            required: true,
            attributeName: {
              localPart: 'field'
            },
            type: 'attribute'
          }, {
            name: 'outliers',
            attributeName: {
              localPart: 'outliers'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'VariableWeight',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'field',
            required: true,
            attributeName: {
              localPart: 'field'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'BoundaryValues',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'array',
            required: true,
            elementName: 'Array',
            typeInfo: '.ArrayType'
          }]
      }, {
        localName: 'SimplePredicate',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'field',
            required: true,
            attributeName: {
              localPart: 'field'
            },
            type: 'attribute'
          }, {
            name: 'operator',
            required: true,
            attributeName: {
              localPart: 'operator'
            },
            type: 'attribute'
          }, {
            name: 'value',
            attributeName: {
              localPart: 'value'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'KNNInput',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'field',
            required: true,
            attributeName: {
              localPart: 'field'
            },
            type: 'attribute'
          }, {
            name: 'fieldWeight',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'fieldWeight'
            },
            type: 'attribute'
          }, {
            name: 'compareFunction',
            attributeName: {
              localPart: 'compareFunction'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'SeasonalFactor',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'array',
            required: true,
            elementName: 'Array',
            typeInfo: '.ArrayType'
          }, {
            name: 'difference',
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'difference'
            },
            type: 'attribute'
          }, {
            name: 'maximumOrder',
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'maximumOrder'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'AR',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'array',
            required: true,
            elementName: 'Array',
            typeInfo: '.ArrayType'
          }]
      }, {
        localName: 'ROCGraph',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'xCoordinates',
            required: true,
            elementName: 'XCoordinates',
            typeInfo: '.XCoordinates'
          }, {
            name: 'yCoordinates',
            required: true,
            elementName: 'YCoordinates',
            typeInfo: '.YCoordinates'
          }, {
            name: 'boundaryValues',
            elementName: 'BoundaryValues',
            typeInfo: '.BoundaryValues'
          }]
      }, {
        localName: 'NeuralInput',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'derivedField',
            required: true,
            elementName: 'DerivedField',
            typeInfo: '.DerivedField'
          }, {
            name: 'id',
            required: true,
            attributeName: {
              localPart: 'id'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'ParentValue',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'parent',
            required: true,
            attributeName: {
              localPart: 'parent'
            },
            type: 'attribute'
          }, {
            name: 'value',
            required: true,
            attributeName: {
              localPart: 'value'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'MapValues',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'fieldColumnPair',
            minOccurs: 0,
            collection: true,
            elementName: 'FieldColumnPair',
            typeInfo: '.FieldColumnPair'
          }, {
            name: 'tableLocator',
            required: true,
            elementName: 'TableLocator',
            typeInfo: '.TableLocator'
          }, {
            name: 'inlineTable',
            required: true,
            elementName: 'InlineTable',
            typeInfo: '.InlineTable'
          }, {
            name: 'mapMissingTo',
            attributeName: {
              localPart: 'mapMissingTo'
            },
            type: 'attribute'
          }, {
            name: 'defaultValue',
            attributeName: {
              localPart: 'defaultValue'
            },
            type: 'attribute'
          }, {
            name: 'outputColumn',
            required: true,
            attributeName: {
              localPart: 'outputColumn'
            },
            type: 'attribute'
          }, {
            name: 'dataType',
            attributeName: {
              localPart: 'dataType'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'RandomLiftGraph',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'liftGraph',
            required: true,
            elementName: 'LiftGraph',
            typeInfo: '.LiftGraph'
          }]
      }, {
        localName: 'DerivedField',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'constant',
            required: true,
            elementName: 'Constant',
            typeInfo: '.Constant'
          }, {
            name: 'fieldRef',
            required: true,
            elementName: 'FieldRef',
            typeInfo: '.FieldRef'
          }, {
            name: 'normContinuous',
            required: true,
            elementName: 'NormContinuous',
            typeInfo: '.NormContinuous'
          }, {
            name: 'normDiscrete',
            required: true,
            elementName: 'NormDiscrete',
            typeInfo: '.NormDiscrete'
          }, {
            name: 'discretize',
            required: true,
            elementName: 'Discretize',
            typeInfo: '.Discretize'
          }, {
            name: 'mapValues',
            required: true,
            elementName: 'MapValues',
            typeInfo: '.MapValues'
          }, {
            name: 'textIndex',
            required: true,
            elementName: 'TextIndex',
            typeInfo: '.TextIndex'
          }, {
            name: 'apply',
            required: true,
            elementName: 'Apply',
            typeInfo: '.Apply'
          }, {
            name: 'aggregate',
            required: true,
            elementName: 'Aggregate',
            typeInfo: '.Aggregate'
          }, {
            name: 'lag',
            required: true,
            elementName: 'Lag',
            typeInfo: '.Lag'
          }, {
            name: 'value',
            minOccurs: 0,
            collection: true,
            elementName: 'Value',
            typeInfo: '.Value'
          }, {
            name: 'name',
            attributeName: {
              localPart: 'name'
            },
            type: 'attribute'
          }, {
            name: 'displayName',
            attributeName: {
              localPart: 'displayName'
            },
            type: 'attribute'
          }, {
            name: 'optype',
            required: true,
            attributeName: {
              localPart: 'optype'
            },
            type: 'attribute'
          }, {
            name: 'dataType',
            required: true,
            attributeName: {
              localPart: 'dataType'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'TextModel',
        typeName: null,
        propertyInfos: [{
            name: 'content',
            required: true,
            minOccurs: 4,
            collection: true,
            mixed: false,
            allowDom: false,
            elementTypeInfos: [{
                elementName: 'ModelExplanation',
                typeInfo: '.ModelExplanation'
              }, {
                elementName: 'TextModelNormalization',
                typeInfo: '.TextModelNormalization'
              }, {
                elementName: 'ModelVerification',
                typeInfo: '.ModelVerification'
              }, {
                elementName: 'DocumentTermMatrix',
                typeInfo: '.DocumentTermMatrix'
              }, {
                elementName: 'LocalTransformations',
                typeInfo: '.LocalTransformations'
              }, {
                elementName: 'Extension',
                typeInfo: '.Extension'
              }, {
                elementName: 'Output',
                typeInfo: '.Output'
              }, {
                elementName: 'Targets',
                typeInfo: '.Targets'
              }, {
                elementName: 'MiningSchema',
                typeInfo: '.MiningSchema'
              }, {
                elementName: 'TextDictionary',
                typeInfo: '.TextDictionary'
              }, {
                elementName: 'TextModelSimiliarity',
                typeInfo: '.TextModelSimiliarity'
              }, {
                elementName: 'TextCorpus',
                typeInfo: '.TextCorpus'
              }, {
                elementName: 'ModelStats',
                typeInfo: '.ModelStats'
              }],
            type: 'elementRefs'
          }, {
            name: 'modelName',
            attributeName: {
              localPart: 'modelName'
            },
            type: 'attribute'
          }, {
            name: 'functionName',
            required: true,
            attributeName: {
              localPart: 'functionName'
            },
            type: 'attribute'
          }, {
            name: 'algorithmName',
            attributeName: {
              localPart: 'algorithmName'
            },
            type: 'attribute'
          }, {
            name: 'numberOfTerms',
            required: true,
            typeInfo: 'NonNegativeInteger',
            attributeName: {
              localPart: 'numberOfTerms'
            },
            type: 'attribute'
          }, {
            name: 'numberOfDocuments',
            required: true,
            typeInfo: 'NonNegativeInteger',
            attributeName: {
              localPart: 'numberOfDocuments'
            },
            type: 'attribute'
          }, {
            name: 'isScorable',
            typeInfo: 'Boolean',
            attributeName: {
              localPart: 'isScorable'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'TextDictionary',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'taxonomy',
            elementName: 'Taxonomy',
            typeInfo: '.Taxonomy'
          }, {
            name: 'array',
            required: true,
            elementName: 'Array',
            typeInfo: '.ArrayType'
          }]
      }, {
        localName: 'MiningSchema',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'miningField',
            required: true,
            collection: true,
            elementName: 'MiningField',
            typeInfo: '.MiningField'
          }]
      }, {
        localName: 'PCovCell',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'pRow',
            required: true,
            attributeName: {
              localPart: 'pRow'
            },
            type: 'attribute'
          }, {
            name: 'pCol',
            required: true,
            attributeName: {
              localPart: 'pCol'
            },
            type: 'attribute'
          }, {
            name: 'tRow',
            attributeName: {
              localPart: 'tRow'
            },
            type: 'attribute'
          }, {
            name: 'tCol',
            attributeName: {
              localPart: 'tCol'
            },
            type: 'attribute'
          }, {
            name: 'value',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'value'
            },
            type: 'attribute'
          }, {
            name: 'targetCategory',
            attributeName: {
              localPart: 'targetCategory'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'PairCounts',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'targetValueCounts',
            required: true,
            elementName: 'TargetValueCounts',
            typeInfo: '.TargetValueCounts'
          }, {
            name: 'value',
            required: true,
            attributeName: {
              localPart: 'value'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'InlineTable',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'row',
            minOccurs: 0,
            collection: true,
            typeInfo: '.Row'
          }]
      }, {
        localName: 'Header',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'application',
            elementName: 'Application',
            typeInfo: '.Application'
          }, {
            name: 'annotation',
            minOccurs: 0,
            collection: true,
            elementName: 'Annotation',
            typeInfo: '.Annotation'
          }, {
            name: 'timestamp',
            elementName: 'Timestamp',
            typeInfo: '.Timestamp'
          }, {
            name: 'copyright',
            attributeName: {
              localPart: 'copyright'
            },
            type: 'attribute'
          }, {
            name: 'description',
            attributeName: {
              localPart: 'description'
            },
            type: 'attribute'
          }, {
            name: 'modelVersion',
            attributeName: {
              localPart: 'modelVersion'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'GaussianProcessModel',
        typeName: null,
        propertyInfos: [{
            name: 'content',
            required: true,
            minOccurs: 3,
            collection: true,
            mixed: false,
            allowDom: false,
            elementTypeInfos: [{
                elementName: 'ModelExplanation',
                typeInfo: '.ModelExplanation'
              }, {
                elementName: 'ModelVerification',
                typeInfo: '.ModelVerification'
              }, {
                elementName: 'LocalTransformations',
                typeInfo: '.LocalTransformations'
              }, {
                elementName: 'Extension',
                typeInfo: '.Extension'
              }, {
                elementName: 'ARDSquaredExponentialKernel',
                typeInfo: '.ARDSquaredExponentialKernel'
              }, {
                elementName: 'Output',
                typeInfo: '.Output'
              }, {
                elementName: 'Targets',
                typeInfo: '.Targets'
              }, {
                elementName: 'MiningSchema',
                typeInfo: '.MiningSchema'
              }, {
                elementName: 'AbsoluteExponentialKernel',
                typeInfo: '.AbsoluteExponentialKernel'
              }, {
                elementName: 'GeneralizedExponentialKernel',
                typeInfo: '.GeneralizedExponentialKernel'
              }, {
                elementName: 'RadialBasisKernel',
                typeInfo: '.RadialBasisKernel'
              }, {
                elementName: 'TrainingInstances',
                typeInfo: '.TrainingInstances'
              }, {
                elementName: 'ModelStats',
                typeInfo: '.ModelStats'
              }],
            type: 'elementRefs'
          }, {
            name: 'modelName',
            attributeName: {
              localPart: 'modelName'
            },
            type: 'attribute'
          }, {
            name: 'functionName',
            required: true,
            attributeName: {
              localPart: 'functionName'
            },
            type: 'attribute'
          }, {
            name: 'algorithmName',
            attributeName: {
              localPart: 'algorithmName'
            },
            type: 'attribute'
          }, {
            name: 'optimizer',
            attributeName: {
              localPart: 'optimizer'
            },
            type: 'attribute'
          }, {
            name: 'isScorable',
            typeInfo: 'Boolean',
            attributeName: {
              localPart: 'isScorable'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'RuleSet',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'ruleSelectionMethod',
            required: true,
            collection: true,
            elementName: 'RuleSelectionMethod',
            typeInfo: '.RuleSelectionMethod'
          }, {
            name: 'scoreDistribution',
            minOccurs: 0,
            collection: true,
            elementName: 'ScoreDistribution',
            typeInfo: '.ScoreDistribution'
          }, {
            name: 'rule',
            minOccurs: 0,
            collection: true,
            elementTypeInfos: [{
                elementName: 'SimpleRule',
                typeInfo: '.SimpleRule'
              }, {
                elementName: 'CompoundRule',
                typeInfo: '.CompoundRule'
              }],
            type: 'elements'
          }, {
            name: 'recordCount',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'recordCount'
            },
            type: 'attribute'
          }, {
            name: 'nbCorrect',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'nbCorrect'
            },
            type: 'attribute'
          }, {
            name: 'defaultScore',
            attributeName: {
              localPart: 'defaultScore'
            },
            type: 'attribute'
          }, {
            name: 'defaultConfidence',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'defaultConfidence'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'PartitionFieldStats',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'counts',
            elementName: 'Counts',
            typeInfo: '.Counts'
          }, {
            name: 'numericInfo',
            elementName: 'NumericInfo',
            typeInfo: '.NumericInfo'
          }, {
            name: 'numarray',
            required: true,
            maxOccurs: 3,
            collection: true,
            elementName: 'Array',
            typeInfo: '.ArrayType'
          }, {
            name: 'field',
            required: true,
            attributeName: {
              localPart: 'field'
            },
            type: 'attribute'
          }, {
            name: 'weighted',
            attributeName: {
              localPart: 'weighted'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'Extension',
        typeName: null,
        propertyInfos: [{
            name: 'content',
            collection: true,
            allowTypedObject: false,
            type: 'anyElement'
          }, {
            name: 'extender',
            attributeName: {
              localPart: 'extender'
            },
            type: 'attribute'
          }, {
            name: 'name',
            attributeName: {
              localPart: 'name'
            },
            type: 'attribute'
          }, {
            name: 'value',
            attributeName: {
              localPart: 'value'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'DocumentTermMatrix',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'matrix',
            required: true,
            elementName: 'Matrix',
            typeInfo: '.Matrix'
          }]
      }, {
        localName: 'CityBlock',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }]
      }, {
        localName: 'CovariateList',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'predictor',
            minOccurs: 0,
            collection: true,
            elementName: 'Predictor',
            typeInfo: '.Predictor'
          }]
      }, {
        localName: 'FinalNu',
        typeName: null,
        propertyInfos: [{
            name: 'array',
            required: true,
            elementName: 'Array',
            typeInfo: '.ArrayType'
          }]
      }, {
        localName: 'Annotation',
        typeName: null,
        propertyInfos: [{
            name: 'content',
            collection: true,
            allowDom: false,
            elementName: 'Extension',
            typeInfo: '.Extension',
            type: 'elementRef'
          }]
      }, {
        localName: 'ItemRef',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'itemRef',
            required: true,
            attributeName: {
              localPart: 'itemRef'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'PredictorTerm',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'fieldRef',
            required: true,
            collection: true,
            elementName: 'FieldRef',
            typeInfo: '.FieldRef'
          }, {
            name: 'name',
            attributeName: {
              localPart: 'name'
            },
            type: 'attribute'
          }, {
            name: 'coefficient',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'coefficient'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'Alternate',
        typeName: null,
        propertyInfos: [{
            name: 'anyDistribution',
            required: true,
            elementName: 'AnyDistribution',
            typeInfo: '.AnyDistribution'
          }, {
            name: 'gaussianDistribution',
            required: true,
            elementName: 'GaussianDistribution',
            typeInfo: '.GaussianDistribution'
          }, {
            name: 'poissonDistribution',
            required: true,
            elementName: 'PoissonDistribution',
            typeInfo: '.PoissonDistribution'
          }, {
            name: 'uniformDistribution',
            required: true,
            elementName: 'UniformDistribution',
            typeInfo: '.UniformDistribution'
          }]
      }, {
        localName: 'XCoordinates',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'array',
            required: true,
            elementName: 'Array',
            typeInfo: '.ArrayType'
          }]
      }, {
        localName: 'FinalOmega',
        typeName: null,
        propertyInfos: [{
            name: 'matrix',
            required: true,
            elementName: 'Matrix',
            typeInfo: '.Matrix'
          }]
      }, {
        localName: 'Decisions',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'decision',
            required: true,
            collection: true,
            elementName: 'Decision',
            typeInfo: '.Decision'
          }, {
            name: 'businessProblem',
            attributeName: {
              localPart: 'businessProblem'
            },
            type: 'attribute'
          }, {
            name: 'description',
            attributeName: {
              localPart: 'description'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'BaselineCell',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'time',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'time'
            },
            type: 'attribute'
          }, {
            name: 'cumHazard',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'cumHazard'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'ArrayType',
        propertyInfos: [{
            name: 'content',
            type: 'value'
          }, {
            name: 'n',
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'n'
            },
            type: 'attribute'
          }, {
            name: 'type',
            required: true,
            attributeName: {
              localPart: 'type'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'Quantile',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'quantileLimit',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'quantileLimit'
            },
            type: 'attribute'
          }, {
            name: 'quantileValue',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'quantileValue'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'TimeSeries',
        typeName: null,
        propertyInfos: [{
            name: 'timeAnchor',
            elementName: 'TimeAnchor',
            typeInfo: '.TimeAnchor'
          }, {
            name: 'timeValue',
            required: true,
            collection: true,
            elementName: 'TimeValue',
            typeInfo: '.TimeValue'
          }, {
            name: 'usage',
            attributeName: {
              localPart: 'usage'
            },
            type: 'attribute'
          }, {
            name: 'startTime',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'startTime'
            },
            type: 'attribute'
          }, {
            name: 'endTime',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'endTime'
            },
            type: 'attribute'
          }, {
            name: 'interpolationMethod',
            attributeName: {
              localPart: 'interpolationMethod'
            },
            type: 'attribute'
          }, {
            name: 'field',
            attributeName: {
              localPart: 'field'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'RegressionTable',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'numericPredictor',
            minOccurs: 0,
            collection: true,
            elementName: 'NumericPredictor',
            typeInfo: '.NumericPredictor'
          }, {
            name: 'categoricalPredictor',
            minOccurs: 0,
            collection: true,
            elementName: 'CategoricalPredictor',
            typeInfo: '.CategoricalPredictor'
          }, {
            name: 'predictorTerm',
            minOccurs: 0,
            collection: true,
            elementName: 'PredictorTerm',
            typeInfo: '.PredictorTerm'
          }, {
            name: 'intercept',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'intercept'
            },
            type: 'attribute'
          }, {
            name: 'targetCategory',
            attributeName: {
              localPart: 'targetCategory'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'BinarySimilarity',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'c00Parameter',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'c00-parameter'
            },
            type: 'attribute'
          }, {
            name: 'c01Parameter',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'c01-parameter'
            },
            type: 'attribute'
          }, {
            name: 'c10Parameter',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'c10-parameter'
            },
            type: 'attribute'
          }, {
            name: 'c11Parameter',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'c11-parameter'
            },
            type: 'attribute'
          }, {
            name: 'd00Parameter',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'd00-parameter'
            },
            type: 'attribute'
          }, {
            name: 'd01Parameter',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'd01-parameter'
            },
            type: 'attribute'
          }, {
            name: 'd10Parameter',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'd10-parameter'
            },
            type: 'attribute'
          }, {
            name: 'd11Parameter',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'd11-parameter'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'ModelVerification',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'verificationFields',
            required: true,
            elementName: 'VerificationFields',
            typeInfo: '.VerificationFields'
          }, {
            name: 'inlineTable',
            required: true,
            elementName: 'InlineTable',
            typeInfo: '.InlineTable'
          }, {
            name: 'recordCount',
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'recordCount'
            },
            type: 'attribute'
          }, {
            name: 'fieldCount',
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'fieldCount'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'SeasonalComponent',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'ar',
            elementName: 'AR',
            typeInfo: '.AR'
          }, {
            name: 'ma',
            elementName: 'MA',
            typeInfo: '.MA'
          }, {
            name: 'p',
            typeInfo: 'NonNegativeInteger',
            attributeName: {
              localPart: 'P'
            },
            type: 'attribute'
          }, {
            name: 'd',
            typeInfo: 'NonNegativeInteger',
            attributeName: {
              localPart: 'D'
            },
            type: 'attribute'
          }, {
            name: 'q',
            typeInfo: 'NonNegativeInteger',
            attributeName: {
              localPart: 'Q'
            },
            type: 'attribute'
          }, {
            name: 'period',
            required: true,
            typeInfo: 'NonNegativeInteger',
            attributeName: {
              localPart: 'period'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'Counts',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'totalFreq',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'totalFreq'
            },
            type: 'attribute'
          }, {
            name: 'missingFreq',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'missingFreq'
            },
            type: 'attribute'
          }, {
            name: 'invalidFreq',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'invalidFreq'
            },
            type: 'attribute'
          }, {
            name: 'cardinality',
            typeInfo: 'NonNegativeInteger',
            attributeName: {
              localPart: 'cardinality'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'BlockIndicator',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'field',
            required: true,
            attributeName: {
              localPart: 'field'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'NeuralLayer',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'neuron',
            required: true,
            collection: true,
            elementName: 'Neuron',
            typeInfo: '.Neuron'
          }, {
            name: 'numberOfNeurons',
            typeInfo: 'NonNegativeInteger',
            attributeName: {
              localPart: 'numberOfNeurons'
            },
            type: 'attribute'
          }, {
            name: 'activationFunction',
            attributeName: {
              localPart: 'activationFunction'
            },
            type: 'attribute'
          }, {
            name: 'threshold',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'threshold'
            },
            type: 'attribute'
          }, {
            name: 'width',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'width'
            },
            type: 'attribute'
          }, {
            name: 'altitude',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'altitude'
            },
            type: 'attribute'
          }, {
            name: 'normalizationMethod',
            attributeName: {
              localPart: 'normalizationMethod'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'Discretize',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'discretizeBin',
            minOccurs: 0,
            collection: true,
            elementName: 'DiscretizeBin',
            typeInfo: '.DiscretizeBin'
          }, {
            name: 'field',
            required: true,
            attributeName: {
              localPart: 'field'
            },
            type: 'attribute'
          }, {
            name: 'mapMissingTo',
            attributeName: {
              localPart: 'mapMissingTo'
            },
            type: 'attribute'
          }, {
            name: 'defaultValue',
            attributeName: {
              localPart: 'defaultValue'
            },
            type: 'attribute'
          }, {
            name: 'dataType',
            attributeName: {
              localPart: 'dataType'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'DataField',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'interval',
            minOccurs: 0,
            collection: true,
            elementName: 'Interval',
            typeInfo: '.Interval'
          }, {
            name: 'value',
            minOccurs: 0,
            collection: true,
            elementName: 'Value',
            typeInfo: '.Value'
          }, {
            name: 'name',
            required: true,
            attributeName: {
              localPart: 'name'
            },
            type: 'attribute'
          }, {
            name: 'displayName',
            attributeName: {
              localPart: 'displayName'
            },
            type: 'attribute'
          }, {
            name: 'optype',
            required: true,
            attributeName: {
              localPart: 'optype'
            },
            type: 'attribute'
          }, {
            name: 'dataType',
            required: true,
            attributeName: {
              localPart: 'dataType'
            },
            type: 'attribute'
          }, {
            name: 'taxonomy',
            attributeName: {
              localPart: 'taxonomy'
            },
            type: 'attribute'
          }, {
            name: 'isCyclic',
            attributeName: {
              localPart: 'isCyclic'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'VerificationFields',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'verificationField',
            required: true,
            collection: true,
            elementName: 'VerificationField',
            typeInfo: '.VerificationField'
          }]
      }, {
        localName: 'PPCell',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'value',
            required: true,
            attributeName: {
              localPart: 'value'
            },
            type: 'attribute'
          }, {
            name: 'predictorName',
            required: true,
            attributeName: {
              localPart: 'predictorName'
            },
            type: 'attribute'
          }, {
            name: 'parameterName',
            required: true,
            attributeName: {
              localPart: 'parameterName'
            },
            type: 'attribute'
          }, {
            name: 'targetCategory',
            attributeName: {
              localPart: 'targetCategory'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'ContinuousNode',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'derivedField',
            minOccurs: 0,
            collection: true,
            elementName: 'DerivedField',
            typeInfo: '.DerivedField'
          }, {
            name: 'continuousConditionalProbabilityOrContinuousDistribution',
            required: true,
            collection: true,
            elementTypeInfos: [{
                elementName: 'ContinuousConditionalProbability',
                typeInfo: '.ContinuousConditionalProbability'
              }, {
                elementName: 'ContinuousDistribution',
                typeInfo: '.ContinuousDistribution'
              }],
            type: 'elements'
          }, {
            name: 'name',
            required: true,
            attributeName: {
              localPart: 'name'
            },
            type: 'attribute'
          }, {
            name: 'count',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'count'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'Level',
        typeName: null,
        propertyInfos: [{
            name: 'alpha',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'alpha'
            },
            type: 'attribute'
          }, {
            name: 'smoothedValue',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'smoothedValue'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'Matrix',
        typeName: null,
        propertyInfos: [{
            name: 'numarray',
            required: true,
            collection: true,
            elementName: 'Array',
            typeInfo: '.ArrayType'
          }, {
            name: 'matCell',
            required: true,
            collection: true,
            elementName: 'MatCell',
            typeInfo: '.MatCell'
          }, {
            name: 'kind',
            attributeName: {
              localPart: 'kind'
            },
            type: 'attribute'
          }, {
            name: 'nbRows',
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'nbRows'
            },
            type: 'attribute'
          }, {
            name: 'nbCols',
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'nbCols'
            },
            type: 'attribute'
          }, {
            name: 'diagDefault',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'diagDefault'
            },
            type: 'attribute'
          }, {
            name: 'offDiagDefault',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'offDiagDefault'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'ClusteringField',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'comparisons',
            elementName: 'Comparisons',
            typeInfo: '.Comparisons'
          }, {
            name: 'field',
            required: true,
            attributeName: {
              localPart: 'field'
            },
            type: 'attribute'
          }, {
            name: 'isCenterField',
            attributeName: {
              localPart: 'isCenterField'
            },
            type: 'attribute'
          }, {
            name: 'fieldWeight',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'fieldWeight'
            },
            type: 'attribute'
          }, {
            name: 'similarityScale',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'similarityScale'
            },
            type: 'attribute'
          }, {
            name: 'compareFunction',
            attributeName: {
              localPart: 'compareFunction'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'ScoreDistribution',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'value',
            required: true,
            attributeName: {
              localPart: 'value'
            },
            type: 'attribute'
          }, {
            name: 'recordCount',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'recordCount'
            },
            type: 'attribute'
          }, {
            name: 'confidence',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'confidence'
            },
            type: 'attribute'
          }, {
            name: 'probability',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'probability'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'NeuralNetwork',
        typeName: null,
        propertyInfos: [{
            name: 'content',
            required: true,
            minOccurs: 3,
            collection: true,
            mixed: false,
            allowDom: false,
            elementTypeInfos: [{
                elementName: 'ModelExplanation',
                typeInfo: '.ModelExplanation'
              }, {
                elementName: 'ModelVerification',
                typeInfo: '.ModelVerification'
              }, {
                elementName: 'NeuralOutputs',
                typeInfo: '.NeuralOutputs'
              }, {
                elementName: 'LocalTransformations',
                typeInfo: '.LocalTransformations'
              }, {
                elementName: 'NeuralLayer',
                typeInfo: '.NeuralLayer'
              }, {
                elementName: 'Extension',
                typeInfo: '.Extension'
              }, {
                elementName: 'ModelStats',
                typeInfo: '.ModelStats'
              }, {
                elementName: 'Output',
                typeInfo: '.Output'
              }, {
                elementName: 'NeuralInputs',
                typeInfo: '.NeuralInputs'
              }, {
                elementName: 'Targets',
                typeInfo: '.Targets'
              }, {
                elementName: 'MiningSchema',
                typeInfo: '.MiningSchema'
              }],
            type: 'elementRefs'
          }, {
            name: 'modelName',
            attributeName: {
              localPart: 'modelName'
            },
            type: 'attribute'
          }, {
            name: 'functionName',
            required: true,
            attributeName: {
              localPart: 'functionName'
            },
            type: 'attribute'
          }, {
            name: 'algorithmName',
            attributeName: {
              localPart: 'algorithmName'
            },
            type: 'attribute'
          }, {
            name: 'activationFunction',
            required: true,
            attributeName: {
              localPart: 'activationFunction'
            },
            type: 'attribute'
          }, {
            name: 'normalizationMethod',
            attributeName: {
              localPart: 'normalizationMethod'
            },
            type: 'attribute'
          }, {
            name: 'threshold',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'threshold'
            },
            type: 'attribute'
          }, {
            name: 'width',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'width'
            },
            type: 'attribute'
          }, {
            name: 'altitude',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'altitude'
            },
            type: 'attribute'
          }, {
            name: 'numberOfLayers',
            typeInfo: 'NonNegativeInteger',
            attributeName: {
              localPart: 'numberOfLayers'
            },
            type: 'attribute'
          }, {
            name: 'isScorable',
            typeInfo: 'Boolean',
            attributeName: {
              localPart: 'isScorable'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'DecisionTree',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'output',
            elementName: 'Output',
            typeInfo: '.Output'
          }, {
            name: 'modelStats',
            elementName: 'ModelStats',
            typeInfo: '.ModelStats'
          }, {
            name: 'targets',
            elementName: 'Targets',
            typeInfo: '.Targets'
          }, {
            name: 'localTransformations',
            elementName: 'LocalTransformations',
            typeInfo: '.LocalTransformations'
          }, {
            name: 'resultField',
            minOccurs: 0,
            collection: true,
            elementName: 'ResultField',
            typeInfo: '.ResultField'
          }, {
            name: 'node',
            required: true,
            elementName: 'Node',
            typeInfo: '.Node'
          }, {
            name: 'modelName',
            attributeName: {
              localPart: 'modelName'
            },
            type: 'attribute'
          }, {
            name: 'functionName',
            required: true,
            attributeName: {
              localPart: 'functionName'
            },
            type: 'attribute'
          }, {
            name: 'algorithmName',
            attributeName: {
              localPart: 'algorithmName'
            },
            type: 'attribute'
          }, {
            name: 'missingValueStrategy',
            attributeName: {
              localPart: 'missingValueStrategy'
            },
            type: 'attribute'
          }, {
            name: 'missingValuePenalty',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'missingValuePenalty'
            },
            type: 'attribute'
          }, {
            name: 'noTrueChildStrategy',
            attributeName: {
              localPart: 'noTrueChildStrategy'
            },
            type: 'attribute'
          }, {
            name: 'splitCharacteristic',
            attributeName: {
              localPart: 'splitCharacteristic'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'ExponentialSmoothing',
        typeName: null,
        propertyInfos: [{
            name: 'level',
            required: true,
            elementName: 'Level',
            typeInfo: '.Level'
          }, {
            name: 'trendExpoSmooth',
            elementName: 'Trend_ExpoSmooth',
            typeInfo: '.TrendExpoSmooth'
          }, {
            name: 'seasonalityExpoSmooth',
            elementName: 'Seasonality_ExpoSmooth',
            typeInfo: '.SeasonalityExpoSmooth'
          }, {
            name: 'timeValue',
            minOccurs: 0,
            collection: true,
            elementName: 'TimeValue',
            typeInfo: '.TimeValue'
          }, {
            name: 'rmse',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'RMSE'
            },
            type: 'attribute'
          }, {
            name: 'transformation',
            attributeName: {
              localPart: 'transformation'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'MeanClusterDistances',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'array',
            required: true,
            elementName: 'Array',
            typeInfo: '.ArrayType'
          }]
      }, {
        localName: 'ConfusionMatrix',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'classLabels',
            required: true,
            elementName: 'ClassLabels',
            typeInfo: '.ClassLabels'
          }, {
            name: 'matrix',
            required: true,
            elementName: 'Matrix',
            typeInfo: '.Matrix'
          }]
      }, {
        localName: 'SupportVectorMachineModel',
        typeName: null,
        propertyInfos: [{
            name: 'content',
            required: true,
            minOccurs: 4,
            collection: true,
            mixed: false,
            allowDom: false,
            elementTypeInfos: [{
                elementName: 'ModelExplanation',
                typeInfo: '.ModelExplanation'
              }, {
                elementName: 'PolynomialKernelType',
                typeInfo: '.PolynomialKernelType'
              }, {
                elementName: 'ModelVerification',
                typeInfo: '.ModelVerification'
              }, {
                elementName: 'LocalTransformations',
                typeInfo: '.LocalTransformations'
              }, {
                elementName: 'Extension',
                typeInfo: '.Extension'
              }, {
                elementName: 'LinearKernelType',
                typeInfo: '.LinearKernelType'
              }, {
                elementName: 'Output',
                typeInfo: '.Output'
              }, {
                elementName: 'Targets',
                typeInfo: '.Targets'
              }, {
                elementName: 'RadialBasisKernelType',
                typeInfo: '.RadialBasisKernelType'
              }, {
                elementName: 'MiningSchema',
                typeInfo: '.MiningSchema'
              }, {
                elementName: 'SigmoidKernelType',
                typeInfo: '.SigmoidKernelType'
              }, {
                elementName: 'ModelStats',
                typeInfo: '.ModelStats'
              }, {
                elementName: 'SupportVectorMachine',
                typeInfo: '.SupportVectorMachine'
              }, {
                elementName: 'VectorDictionary',
                typeInfo: '.VectorDictionary'
              }],
            type: 'elementRefs'
          }, {
            name: 'modelName',
            attributeName: {
              localPart: 'modelName'
            },
            type: 'attribute'
          }, {
            name: 'functionName',
            required: true,
            attributeName: {
              localPart: 'functionName'
            },
            type: 'attribute'
          }, {
            name: 'algorithmName',
            attributeName: {
              localPart: 'algorithmName'
            },
            type: 'attribute'
          }, {
            name: 'threshold',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'threshold'
            },
            type: 'attribute'
          }, {
            name: 'svmRepresentation',
            attributeName: {
              localPart: 'svmRepresentation'
            },
            type: 'attribute'
          }, {
            name: 'classificationMethod',
            attributeName: {
              localPart: 'classificationMethod'
            },
            type: 'attribute'
          }, {
            name: 'maxWins',
            typeInfo: 'Boolean',
            attributeName: {
              localPart: 'maxWins'
            },
            type: 'attribute'
          }, {
            name: 'isScorable',
            typeInfo: 'Boolean',
            attributeName: {
              localPart: 'isScorable'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'TimeException',
        typeName: null,
        propertyInfos: [{
            name: 'array',
            required: true,
            elementName: 'Array',
            typeInfo: '.ArrayType'
          }, {
            name: 'type',
            attributeName: {
              localPart: 'type'
            },
            type: 'attribute'
          }, {
            name: 'count',
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'count'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'Comparisons',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'matrix',
            required: true,
            elementName: 'Matrix',
            typeInfo: '.Matrix'
          }]
      }, {
        localName: 'BayesInputs',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'bayesInput',
            required: true,
            collection: true,
            elementName: 'BayesInput',
            typeInfo: '.BayesInput'
          }]
      }, {
        localName: 'Lower',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'constant',
            required: true,
            elementName: 'Constant',
            typeInfo: '.Constant'
          }, {
            name: 'fieldRef',
            required: true,
            elementName: 'FieldRef',
            typeInfo: '.FieldRef'
          }, {
            name: 'normContinuous',
            required: true,
            elementName: 'NormContinuous',
            typeInfo: '.NormContinuous'
          }, {
            name: 'normDiscrete',
            required: true,
            elementName: 'NormDiscrete',
            typeInfo: '.NormDiscrete'
          }, {
            name: 'discretize',
            required: true,
            elementName: 'Discretize',
            typeInfo: '.Discretize'
          }, {
            name: 'mapValues',
            required: true,
            elementName: 'MapValues',
            typeInfo: '.MapValues'
          }, {
            name: 'textIndex',
            required: true,
            elementName: 'TextIndex',
            typeInfo: '.TextIndex'
          }, {
            name: 'apply',
            required: true,
            elementName: 'Apply',
            typeInfo: '.Apply'
          }, {
            name: 'aggregate',
            required: true,
            elementName: 'Aggregate',
            typeInfo: '.Aggregate'
          }, {
            name: 'lag',
            required: true,
            elementName: 'Lag',
            typeInfo: '.Lag'
          }]
      }, {
        localName: 'INTSparseArray',
        typeName: null,
        propertyInfos: [{
            name: 'indices',
            elementName: 'Indices',
            typeInfo: {
              type: 'list',
              baseTypeInfo: 'Int'
            }
          }, {
            name: 'intEntries',
            elementName: 'INT-Entries',
            typeInfo: {
              type: 'list',
              baseTypeInfo: 'Int'
            }
          }, {
            name: 'n',
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'n'
            },
            type: 'attribute'
          }, {
            name: 'defaultValue',
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'defaultValue'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'KohonenMap',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'coord1',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'coord1'
            },
            type: 'attribute'
          }, {
            name: 'coord2',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'coord2'
            },
            type: 'attribute'
          }, {
            name: 'coord3',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'coord3'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'Numerator',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'nonseasonalFactor',
            elementName: 'NonseasonalFactor',
            typeInfo: '.NonseasonalFactor'
          }, {
            name: 'seasonalFactor',
            elementName: 'SeasonalFactor',
            typeInfo: '.SeasonalFactor'
          }]
      }, {
        localName: 'TrendCoefficients',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'realSparseArray',
            elementName: 'REAL-SparseArray',
            typeInfo: '.REALSparseArray'
          }]
      }, {
        localName: 'VectorDictionary',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'vectorFields',
            required: true,
            elementName: 'VectorFields',
            typeInfo: '.VectorFields'
          }, {
            name: 'vectorInstance',
            minOccurs: 0,
            collection: true,
            elementName: 'VectorInstance',
            typeInfo: '.VectorInstance'
          }, {
            name: 'numberOfVectors',
            typeInfo: 'NonNegativeInteger',
            attributeName: {
              localPart: 'numberOfVectors'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'AnyDistribution',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'mean',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'mean'
            },
            type: 'attribute'
          }, {
            name: 'variance',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'variance'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'CorrelationFields',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'array',
            required: true,
            elementName: 'Array',
            typeInfo: '.ArrayType'
          }]
      }, {
        localName: 'FinalTheta',
        typeName: null,
        propertyInfos: [{
            name: 'theta',
            required: true,
            collection: true,
            elementName: 'Theta',
            typeInfo: '.Theta'
          }]
      }, {
        localName: 'Apply',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'expression',
            minOccurs: 0,
            collection: true,
            elementTypeInfos: [{
                elementName: 'Constant',
                typeInfo: '.Constant'
              }, {
                elementName: 'FieldRef',
                typeInfo: '.FieldRef'
              }, {
                elementName: 'NormContinuous',
                typeInfo: '.NormContinuous'
              }, {
                elementName: 'NormDiscrete',
                typeInfo: '.NormDiscrete'
              }, {
                elementName: 'Discretize',
                typeInfo: '.Discretize'
              }, {
                elementName: 'MapValues',
                typeInfo: '.MapValues'
              }, {
                elementName: 'TextIndex',
                typeInfo: '.TextIndex'
              }, {
                elementName: 'Apply',
                typeInfo: '.Apply'
              }, {
                elementName: 'Aggregate',
                typeInfo: '.Aggregate'
              }, {
                elementName: 'Lag',
                typeInfo: '.Lag'
              }],
            type: 'elements'
          }, {
            name: 'function',
            required: true,
            attributeName: {
              localPart: 'function'
            },
            type: 'attribute'
          }, {
            name: 'mapMissingTo',
            attributeName: {
              localPart: 'mapMissingTo'
            },
            type: 'attribute'
          }, {
            name: 'defaultValue',
            attributeName: {
              localPart: 'defaultValue'
            },
            type: 'attribute'
          }, {
            name: 'invalidValueTreatment',
            attributeName: {
              localPart: 'invalidValueTreatment'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'ParameterList',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'parameter',
            minOccurs: 0,
            collection: true,
            elementName: 'Parameter',
            typeInfo: '.Parameter'
          }]
      }, {
        localName: 'TrendExpoSmooth',
        typeName: null,
        propertyInfos: [{
            name: 'array',
            required: true,
            elementName: 'Array',
            typeInfo: '.ArrayType'
          }, {
            name: 'trend',
            attributeName: {
              localPart: 'trend'
            },
            type: 'attribute'
          }, {
            name: 'gamma',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'gamma'
            },
            type: 'attribute'
          }, {
            name: 'phi',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'phi'
            },
            type: 'attribute'
          }, {
            name: 'smoothedValue',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'smoothedValue'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'VerificationField',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'field',
            required: true,
            attributeName: {
              localPart: 'field'
            },
            type: 'attribute'
          }, {
            name: 'column',
            attributeName: {
              localPart: 'column'
            },
            type: 'attribute'
          }, {
            name: 'precision',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'precision'
            },
            type: 'attribute'
          }, {
            name: 'zeroThreshold',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'zeroThreshold'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'VectorInstance',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'realSparseArray',
            required: true,
            elementName: 'REAL-SparseArray',
            typeInfo: '.REALSparseArray'
          }, {
            name: 'array',
            required: true,
            elementName: 'Array',
            typeInfo: '.ArrayType'
          }, {
            name: 'id',
            required: true,
            attributeName: {
              localPart: 'id'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'ChildParent',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'fieldColumnPair',
            minOccurs: 0,
            collection: true,
            elementName: 'FieldColumnPair',
            typeInfo: '.FieldColumnPair'
          }, {
            name: 'tableLocator',
            required: true,
            elementName: 'TableLocator',
            typeInfo: '.TableLocator'
          }, {
            name: 'inlineTable',
            required: true,
            elementName: 'InlineTable',
            typeInfo: '.InlineTable'
          }, {
            name: 'childField',
            required: true,
            attributeName: {
              localPart: 'childField'
            },
            type: 'attribute'
          }, {
            name: 'parentField',
            required: true,
            attributeName: {
              localPart: 'parentField'
            },
            type: 'attribute'
          }, {
            name: 'parentLevelField',
            attributeName: {
              localPart: 'parentLevelField'
            },
            type: 'attribute'
          }, {
            name: 'isRecursive',
            attributeName: {
              localPart: 'isRecursive'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'SupportVectors',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'supportVector',
            required: true,
            collection: true,
            elementName: 'SupportVector',
            typeInfo: '.SupportVector'
          }, {
            name: 'numberOfSupportVectors',
            typeInfo: 'NonNegativeInteger',
            attributeName: {
              localPart: 'numberOfSupportVectors'
            },
            type: 'attribute'
          }, {
            name: 'numberOfAttributes',
            typeInfo: 'NonNegativeInteger',
            attributeName: {
              localPart: 'numberOfAttributes'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'FinalStateVector',
        typeName: null,
        propertyInfos: [{
            name: 'array',
            required: true,
            elementName: 'Array',
            typeInfo: '.ArrayType'
          }]
      }, {
        localName: 'Time',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'min',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'min'
            },
            type: 'attribute'
          }, {
            name: 'max',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'max'
            },
            type: 'attribute'
          }, {
            name: 'mean',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'mean'
            },
            type: 'attribute'
          }, {
            name: 'standardDeviation',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'standardDeviation'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'TextCorpus',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'textDocument',
            minOccurs: 0,
            collection: true,
            elementName: 'TextDocument',
            typeInfo: '.TextDocument'
          }]
      }, {
        localName: 'Lag',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'blockIndicator',
            minOccurs: 0,
            collection: true,
            elementName: 'BlockIndicator',
            typeInfo: '.BlockIndicator'
          }, {
            name: 'field',
            required: true,
            attributeName: {
              localPart: 'field'
            },
            type: 'attribute'
          }, {
            name: 'n',
            typeInfo: 'PositiveInteger',
            attributeName: {
              localPart: 'n'
            },
            type: 'attribute'
          }, {
            name: 'aggregate',
            attributeName: {
              localPart: 'aggregate'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'StateVector',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'array',
            required: true,
            elementName: 'Array',
            typeInfo: '.ArrayType'
          }]
      }, {
        localName: 'SequenceRule',
        typeName: null,
        propertyInfos: [{
            name: 'content',
            required: true,
            minOccurs: 3,
            collection: true,
            mixed: false,
            allowDom: false,
            elementTypeInfos: [{
                elementName: 'ConsequentSequence',
                typeInfo: '.ConsequentSequence'
              }, {
                elementName: 'AntecedentSequence',
                typeInfo: '.AntecedentSequence'
              }, {
                elementName: 'Delimiter',
                typeInfo: '.Delimiter'
              }, {
                elementName: 'Extension',
                typeInfo: '.Extension'
              }, {
                elementName: 'Time',
                typeInfo: '.Time'
              }],
            type: 'elementRefs'
          }, {
            name: 'id',
            required: true,
            attributeName: {
              localPart: 'id'
            },
            type: 'attribute'
          }, {
            name: 'numberOfSets',
            required: true,
            typeInfo: 'NonNegativeInteger',
            attributeName: {
              localPart: 'numberOfSets'
            },
            type: 'attribute'
          }, {
            name: 'occurrence',
            required: true,
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'occurrence'
            },
            type: 'attribute'
          }, {
            name: 'support',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'support'
            },
            type: 'attribute'
          }, {
            name: 'confidence',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'confidence'
            },
            type: 'attribute'
          }, {
            name: 'lift',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'lift'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'RadialBasisKernelType',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'description',
            attributeName: {
              localPart: 'description'
            },
            type: 'attribute'
          }, {
            name: 'gamma',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'gamma'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'RuleSelectionMethod',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'criterion',
            required: true,
            attributeName: {
              localPart: 'criterion'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'BayesianNetworkModel',
        typeName: null,
        propertyInfos: [{
            name: 'content',
            required: true,
            minOccurs: 2,
            collection: true,
            mixed: false,
            allowDom: false,
            elementTypeInfos: [{
                elementName: 'ModelExplanation',
                typeInfo: '.ModelExplanation'
              }, {
                elementName: 'ModelVerification',
                typeInfo: '.ModelVerification'
              }, {
                elementName: 'BayesianNetworkNodes',
                typeInfo: '.BayesianNetworkNodes'
              }, {
                elementName: 'LocalTransformations',
                typeInfo: '.LocalTransformations'
              }, {
                elementName: 'Extension',
                typeInfo: '.Extension'
              }, {
                elementName: 'ModelStats',
                typeInfo: '.ModelStats'
              }, {
                elementName: 'Output',
                typeInfo: '.Output'
              }, {
                elementName: 'Targets',
                typeInfo: '.Targets'
              }, {
                elementName: 'MiningSchema',
                typeInfo: '.MiningSchema'
              }],
            type: 'elementRefs'
          }, {
            name: 'modelName',
            attributeName: {
              localPart: 'modelName'
            },
            type: 'attribute'
          }, {
            name: 'functionName',
            required: true,
            attributeName: {
              localPart: 'functionName'
            },
            type: 'attribute'
          }, {
            name: 'algorithmName',
            attributeName: {
              localPart: 'algorithmName'
            },
            type: 'attribute'
          }, {
            name: 'modelType',
            attributeName: {
              localPart: 'modelType'
            },
            type: 'attribute'
          }, {
            name: 'inferenceMethod',
            attributeName: {
              localPart: 'inferenceMethod'
            },
            type: 'attribute'
          }, {
            name: 'isScorable',
            typeInfo: 'Boolean',
            attributeName: {
              localPart: 'isScorable'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'REALSparseArray',
        typeName: null,
        propertyInfos: [{
            name: 'indices',
            elementName: 'Indices',
            typeInfo: {
              type: 'list',
              baseTypeInfo: 'Int'
            }
          }, {
            name: 'realEntries',
            elementName: 'REAL-Entries',
            typeInfo: {
              type: 'list',
              baseTypeInfo: 'Double'
            }
          }, {
            name: 'n',
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'n'
            },
            type: 'attribute'
          }, {
            name: 'defaultValue',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'defaultValue'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'ContinuousDistribution',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'triangularDistributionForBN',
            required: true,
            elementName: 'TriangularDistributionForBN',
            typeInfo: '.TriangularDistributionForBN'
          }, {
            name: 'normalDistributionForBN',
            required: true,
            elementName: 'NormalDistributionForBN',
            typeInfo: '.NormalDistributionForBN'
          }, {
            name: 'lognormalDistributionForBN',
            required: true,
            elementName: 'LognormalDistributionForBN',
            typeInfo: '.LognormalDistributionForBN'
          }, {
            name: 'uniformDistributionForBN',
            required: true,
            elementName: 'UniformDistributionForBN',
            typeInfo: '.UniformDistributionForBN'
          }]
      }, {
        localName: 'Lambda',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'array',
            required: true,
            elementName: 'Array',
            typeInfo: '.ArrayType'
          }]
      }, {
        localName: 'DiscreteConditionalProbability',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'parentValue',
            required: true,
            collection: true,
            elementName: 'ParentValue',
            typeInfo: '.ParentValue'
          }, {
            name: 'valueProbability',
            required: true,
            collection: true,
            elementName: 'ValueProbability',
            typeInfo: '.ValueProbability'
          }, {
            name: 'count',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'count'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'BayesianNetworkNodes',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'discreteNodeOrContinuousNode',
            required: true,
            collection: true,
            elementTypeInfos: [{
                elementName: 'DiscreteNode',
                typeInfo: '.DiscreteNode'
              }, {
                elementName: 'ContinuousNode',
                typeInfo: '.ContinuousNode'
              }],
            type: 'elements'
          }]
      }, {
        localName: 'PPMatrix',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'ppCell',
            minOccurs: 0,
            collection: true,
            elementName: 'PPCell',
            typeInfo: '.PPCell'
          }]
      }, {
        localName: 'ResidualSquareCoefficients',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'residuals',
            elementName: 'Residuals',
            typeInfo: '.Residuals'
          }, {
            name: 'maCoefficients',
            elementName: 'MACoefficients',
            typeInfo: '.MACoefficients'
          }]
      }, {
        localName: 'PastVariances',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'array',
            required: true,
            elementName: 'Array',
            typeInfo: '.ArrayType'
          }]
      }, {
        localName: 'CorrelationValues',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'matrix',
            required: true,
            elementName: 'Matrix',
            typeInfo: '.Matrix'
          }]
      }, {
        localName: 'TimeCycle',
        typeName: null,
        propertyInfos: [{
            name: 'array',
            required: true,
            elementName: 'Array',
            typeInfo: '.ArrayType'
          }, {
            name: 'length',
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'length'
            },
            type: 'attribute'
          }, {
            name: 'type',
            attributeName: {
              localPart: 'type'
            },
            type: 'attribute'
          }, {
            name: 'displayName',
            attributeName: {
              localPart: 'displayName'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'Constant',
        typeName: null,
        propertyInfos: [{
            name: 'value',
            type: 'value'
          }, {
            name: 'dataType',
            attributeName: {
              localPart: 'dataType'
            },
            type: 'attribute'
          }, {
            name: 'missing',
            typeInfo: 'Boolean',
            attributeName: {
              localPart: 'missing'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'SequenceReference',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'seqId',
            required: true,
            attributeName: {
              localPart: 'seqId'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'ClusteringModelQuality',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'dataName',
            attributeName: {
              localPart: 'dataName'
            },
            type: 'attribute'
          }, {
            name: 'sse',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'SSE'
            },
            type: 'attribute'
          }, {
            name: 'ssb',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'SSB'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'MissingValueWeights',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'array',
            required: true,
            elementName: 'Array',
            typeInfo: '.ArrayType'
          }]
      }, {
        localName: 'FinalNoise',
        typeName: null,
        propertyInfos: [{
            name: 'array',
            required: true,
            elementName: 'Array',
            typeInfo: '.ArrayType'
          }]
      }, {
        localName: 'NonseasonalFactor',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'array',
            required: true,
            elementName: 'Array',
            typeInfo: '.ArrayType'
          }, {
            name: 'difference',
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'difference'
            },
            type: 'attribute'
          }, {
            name: 'maximumOrder',
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'maximumOrder'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'Upper',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'constant',
            required: true,
            elementName: 'Constant',
            typeInfo: '.Constant'
          }, {
            name: 'fieldRef',
            required: true,
            elementName: 'FieldRef',
            typeInfo: '.FieldRef'
          }, {
            name: 'normContinuous',
            required: true,
            elementName: 'NormContinuous',
            typeInfo: '.NormContinuous'
          }, {
            name: 'normDiscrete',
            required: true,
            elementName: 'NormDiscrete',
            typeInfo: '.NormDiscrete'
          }, {
            name: 'discretize',
            required: true,
            elementName: 'Discretize',
            typeInfo: '.Discretize'
          }, {
            name: 'mapValues',
            required: true,
            elementName: 'MapValues',
            typeInfo: '.MapValues'
          }, {
            name: 'textIndex',
            required: true,
            elementName: 'TextIndex',
            typeInfo: '.TextIndex'
          }, {
            name: 'apply',
            required: true,
            elementName: 'Apply',
            typeInfo: '.Apply'
          }, {
            name: 'aggregate',
            required: true,
            elementName: 'Aggregate',
            typeInfo: '.Aggregate'
          }, {
            name: 'lag',
            required: true,
            elementName: 'Lag',
            typeInfo: '.Lag'
          }]
      }, {
        localName: 'Anova',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'anovaRow',
            required: true,
            minOccurs: 3,
            maxOccurs: 3,
            collection: true,
            elementName: 'AnovaRow',
            typeInfo: '.AnovaRow'
          }, {
            name: 'target',
            attributeName: {
              localPart: 'target'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'AssociationModel',
        typeName: null,
        propertyInfos: [{
            name: 'content',
            required: true,
            collection: true,
            mixed: false,
            allowDom: false,
            elementTypeInfos: [{
                elementName: 'ModelVerification',
                typeInfo: '.ModelVerification'
              }, {
                elementName: 'Item',
                typeInfo: '.Item'
              }, {
                elementName: 'LocalTransformations',
                typeInfo: '.LocalTransformations'
              }, {
                elementName: 'AssociationRule',
                typeInfo: '.AssociationRule'
              }, {
                elementName: 'Extension',
                typeInfo: '.Extension'
              }, {
                elementName: 'ModelStats',
                typeInfo: '.ModelStats'
              }, {
                elementName: 'Output',
                typeInfo: '.Output'
              }, {
                elementName: 'Itemset',
                typeInfo: '.Itemset'
              }, {
                elementName: 'MiningSchema',
                typeInfo: '.MiningSchema'
              }],
            type: 'elementRefs'
          }, {
            name: 'modelName',
            attributeName: {
              localPart: 'modelName'
            },
            type: 'attribute'
          }, {
            name: 'functionName',
            required: true,
            attributeName: {
              localPart: 'functionName'
            },
            type: 'attribute'
          }, {
            name: 'algorithmName',
            attributeName: {
              localPart: 'algorithmName'
            },
            type: 'attribute'
          }, {
            name: 'numberOfTransactions',
            required: true,
            typeInfo: 'NonNegativeInteger',
            attributeName: {
              localPart: 'numberOfTransactions'
            },
            type: 'attribute'
          }, {
            name: 'maxNumberOfItemsPerTA',
            typeInfo: 'NonNegativeInteger',
            attributeName: {
              localPart: 'maxNumberOfItemsPerTA'
            },
            type: 'attribute'
          }, {
            name: 'avgNumberOfItemsPerTA',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'avgNumberOfItemsPerTA'
            },
            type: 'attribute'
          }, {
            name: 'minimumSupport',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'minimumSupport'
            },
            type: 'attribute'
          }, {
            name: 'minimumConfidence',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'minimumConfidence'
            },
            type: 'attribute'
          }, {
            name: 'lengthLimit',
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'lengthLimit'
            },
            type: 'attribute'
          }, {
            name: 'numberOfItems',
            required: true,
            typeInfo: 'NonNegativeInteger',
            attributeName: {
              localPart: 'numberOfItems'
            },
            type: 'attribute'
          }, {
            name: 'numberOfItemsets',
            required: true,
            typeInfo: 'NonNegativeInteger',
            attributeName: {
              localPart: 'numberOfItemsets'
            },
            type: 'attribute'
          }, {
            name: 'numberOfRules',
            required: true,
            typeInfo: 'NonNegativeInteger',
            attributeName: {
              localPart: 'numberOfRules'
            },
            type: 'attribute'
          }, {
            name: 'isScorable',
            typeInfo: 'Boolean',
            attributeName: {
              localPart: 'isScorable'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'DynamicRegressor',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'numerator',
            elementName: 'Numerator',
            typeInfo: '.Numerator'
          }, {
            name: 'denominator',
            elementName: 'Denominator',
            typeInfo: '.Denominator'
          }, {
            name: 'regressorValues',
            elementName: 'RegressorValues',
            typeInfo: '.RegressorValues'
          }, {
            name: 'field',
            required: true,
            attributeName: {
              localPart: 'field'
            },
            type: 'attribute'
          }, {
            name: 'transformation',
            attributeName: {
              localPart: 'transformation'
            },
            type: 'attribute'
          }, {
            name: 'delay',
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'delay'
            },
            type: 'attribute'
          }, {
            name: 'futureValuesMethod',
            attributeName: {
              localPart: 'futureValuesMethod'
            },
            type: 'attribute'
          }, {
            name: 'targetField',
            attributeName: {
              localPart: 'targetField'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'BaselineStratum',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'baselineCell',
            minOccurs: 0,
            collection: true,
            elementName: 'BaselineCell',
            typeInfo: '.BaselineCell'
          }, {
            name: 'value',
            required: true,
            attributeName: {
              localPart: 'value'
            },
            type: 'attribute'
          }, {
            name: 'label',
            attributeName: {
              localPart: 'label'
            },
            type: 'attribute'
          }, {
            name: 'maxTime',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'maxTime'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'MultivariateStat',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'name',
            attributeName: {
              localPart: 'name'
            },
            type: 'attribute'
          }, {
            name: 'category',
            attributeName: {
              localPart: 'category'
            },
            type: 'attribute'
          }, {
            name: 'exponent',
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'exponent'
            },
            type: 'attribute'
          }, {
            name: 'isIntercept',
            typeInfo: 'Boolean',
            attributeName: {
              localPart: 'isIntercept'
            },
            type: 'attribute'
          }, {
            name: 'importance',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'importance'
            },
            type: 'attribute'
          }, {
            name: 'stdError',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'stdError'
            },
            type: 'attribute'
          }, {
            name: 'tValue',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'tValue'
            },
            type: 'attribute'
          }, {
            name: 'chiSquareValue',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'chiSquareValue'
            },
            type: 'attribute'
          }, {
            name: 'fStatistic',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'fStatistic'
            },
            type: 'attribute'
          }, {
            name: 'df',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'dF'
            },
            type: 'attribute'
          }, {
            name: 'pValueAlpha',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'pValueAlpha'
            },
            type: 'attribute'
          }, {
            name: 'pValueInitial',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'pValueInitial'
            },
            type: 'attribute'
          }, {
            name: 'pValueFinal',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'pValueFinal'
            },
            type: 'attribute'
          }, {
            name: 'confidenceLevel',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'confidenceLevel'
            },
            type: 'attribute'
          }, {
            name: 'confidenceLowerBound',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'confidenceLowerBound'
            },
            type: 'attribute'
          }, {
            name: 'confidenceUpperBound',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'confidenceUpperBound'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'FieldValueCount',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'field',
            required: true,
            attributeName: {
              localPart: 'field'
            },
            type: 'attribute'
          }, {
            name: 'value',
            required: true,
            attributeName: {
              localPart: 'value'
            },
            type: 'attribute'
          }, {
            name: 'count',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'count'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'FieldRef',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'field',
            required: true,
            attributeName: {
              localPart: 'field'
            },
            type: 'attribute'
          }, {
            name: 'mapMissingTo',
            attributeName: {
              localPart: 'mapMissingTo'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'PCovMatrix',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'pCovCell',
            required: true,
            collection: true,
            elementName: 'PCovCell',
            typeInfo: '.PCovCell'
          }, {
            name: 'type',
            attributeName: {
              localPart: 'type'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'NeuralInputs',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'neuralInput',
            required: true,
            collection: true,
            elementName: 'NeuralInput',
            typeInfo: '.NeuralInput'
          }, {
            name: 'numberOfInputs',
            typeInfo: 'NonNegativeInteger',
            attributeName: {
              localPart: 'numberOfInputs'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'TransferFunctionValues',
        typeName: null,
        propertyInfos: [{
            name: 'array',
            required: true,
            elementName: 'Array',
            typeInfo: '.ArrayType'
          }]
      }, {
        localName: 'RegressionModel',
        typeName: null,
        propertyInfos: [{
            name: 'content',
            required: true,
            minOccurs: 2,
            collection: true,
            mixed: false,
            allowDom: false,
            elementTypeInfos: [{
                elementName: 'ModelExplanation',
                typeInfo: '.ModelExplanation'
              }, {
                elementName: 'ModelVerification',
                typeInfo: '.ModelVerification'
              }, {
                elementName: 'LocalTransformations',
                typeInfo: '.LocalTransformations'
              }, {
                elementName: 'Extension',
                typeInfo: '.Extension'
              }, {
                elementName: 'ModelStats',
                typeInfo: '.ModelStats'
              }, {
                elementName: 'Output',
                typeInfo: '.Output'
              }, {
                elementName: 'Targets',
                typeInfo: '.Targets'
              }, {
                elementName: 'MiningSchema',
                typeInfo: '.MiningSchema'
              }, {
                elementName: 'RegressionTable',
                typeInfo: '.RegressionTable'
              }],
            type: 'elementRefs'
          }, {
            name: 'modelName',
            attributeName: {
              localPart: 'modelName'
            },
            type: 'attribute'
          }, {
            name: 'functionName',
            required: true,
            attributeName: {
              localPart: 'functionName'
            },
            type: 'attribute'
          }, {
            name: 'algorithmName',
            attributeName: {
              localPart: 'algorithmName'
            },
            type: 'attribute'
          }, {
            name: 'modelType',
            attributeName: {
              localPart: 'modelType'
            },
            type: 'attribute'
          }, {
            name: 'targetFieldName',
            attributeName: {
              localPart: 'targetFieldName'
            },
            type: 'attribute'
          }, {
            name: 'normalizationMethod',
            attributeName: {
              localPart: 'normalizationMethod'
            },
            type: 'attribute'
          }, {
            name: 'isScorable',
            typeInfo: 'Boolean',
            attributeName: {
              localPart: 'isScorable'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'GeneralizedExponentialKernel',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'lambda',
            minOccurs: 0,
            collection: true,
            elementName: 'Lambda',
            typeInfo: '.Lambda'
          }, {
            name: 'description',
            attributeName: {
              localPart: 'description'
            },
            type: 'attribute'
          }, {
            name: 'gamma',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'gamma'
            },
            type: 'attribute'
          }, {
            name: 'noiseVariance',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'noiseVariance'
            },
            type: 'attribute'
          }, {
            name: 'degree',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'degree'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'OutputField',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'decisions',
            elementName: 'Decisions',
            typeInfo: '.Decisions'
          }, {
            name: 'constant',
            required: true,
            elementName: 'Constant',
            typeInfo: '.Constant'
          }, {
            name: 'fieldRef',
            required: true,
            elementName: 'FieldRef',
            typeInfo: '.FieldRef'
          }, {
            name: 'normContinuous',
            required: true,
            elementName: 'NormContinuous',
            typeInfo: '.NormContinuous'
          }, {
            name: 'normDiscrete',
            required: true,
            elementName: 'NormDiscrete',
            typeInfo: '.NormDiscrete'
          }, {
            name: 'discretize',
            required: true,
            elementName: 'Discretize',
            typeInfo: '.Discretize'
          }, {
            name: 'mapValues',
            required: true,
            elementName: 'MapValues',
            typeInfo: '.MapValues'
          }, {
            name: 'textIndex',
            required: true,
            elementName: 'TextIndex',
            typeInfo: '.TextIndex'
          }, {
            name: 'apply',
            required: true,
            elementName: 'Apply',
            typeInfo: '.Apply'
          }, {
            name: 'aggregate',
            required: true,
            elementName: 'Aggregate',
            typeInfo: '.Aggregate'
          }, {
            name: 'lag',
            required: true,
            elementName: 'Lag',
            typeInfo: '.Lag'
          }, {
            name: 'valueAttribute',
            minOccurs: 0,
            collection: true,
            elementName: 'Value',
            typeInfo: '.Value'
          }, {
            name: 'name',
            required: true,
            attributeName: {
              localPart: 'name'
            },
            type: 'attribute'
          }, {
            name: 'displayName',
            attributeName: {
              localPart: 'displayName'
            },
            type: 'attribute'
          }, {
            name: 'optype',
            attributeName: {
              localPart: 'optype'
            },
            type: 'attribute'
          }, {
            name: 'dataType',
            required: true,
            attributeName: {
              localPart: 'dataType'
            },
            type: 'attribute'
          }, {
            name: 'targetField',
            attributeName: {
              localPart: 'targetField'
            },
            type: 'attribute'
          }, {
            name: 'feature',
            attributeName: {
              localPart: 'feature'
            },
            type: 'attribute'
          }, {
            name: 'value',
            attributeName: {
              localPart: 'value'
            },
            type: 'attribute'
          }, {
            name: 'ruleFeature',
            attributeName: {
              localPart: 'ruleFeature'
            },
            type: 'attribute'
          }, {
            name: 'algorithm',
            attributeName: {
              localPart: 'algorithm'
            },
            type: 'attribute'
          }, {
            name: 'rank',
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'rank'
            },
            type: 'attribute'
          }, {
            name: 'rankBasis',
            attributeName: {
              localPart: 'rankBasis'
            },
            type: 'attribute'
          }, {
            name: 'rankOrder',
            attributeName: {
              localPart: 'rankOrder'
            },
            type: 'attribute'
          }, {
            name: 'isMultiValued',
            attributeName: {
              localPart: 'isMultiValued'
            },
            type: 'attribute'
          }, {
            name: 'segmentId',
            attributeName: {
              localPart: 'segmentId'
            },
            type: 'attribute'
          }, {
            name: 'isFinalResult',
            typeInfo: 'Boolean',
            attributeName: {
              localPart: 'isFinalResult'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'SupportVectorMachine',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'supportVectors',
            elementName: 'SupportVectors',
            typeInfo: '.SupportVectors'
          }, {
            name: 'coefficients',
            required: true,
            elementName: 'Coefficients',
            typeInfo: '.Coefficients'
          }, {
            name: 'targetCategory',
            attributeName: {
              localPart: 'targetCategory'
            },
            type: 'attribute'
          }, {
            name: 'alternateTargetCategory',
            attributeName: {
              localPart: 'alternateTargetCategory'
            },
            type: 'attribute'
          }, {
            name: 'threshold',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'threshold'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'Interval',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'closure',
            required: true,
            attributeName: {
              localPart: 'closure'
            },
            type: 'attribute'
          }, {
            name: 'leftMargin',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'leftMargin'
            },
            type: 'attribute'
          }, {
            name: 'rightMargin',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'rightMargin'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'ClassLabels',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'array',
            required: true,
            elementName: 'Array',
            typeInfo: '.ArrayType'
          }]
      }, {
        localName: 'ROC',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'rocGraph',
            required: true,
            elementName: 'ROCGraph',
            typeInfo: '.ROCGraph'
          }, {
            name: 'positiveTargetFieldValue',
            required: true,
            attributeName: {
              localPart: 'positiveTargetFieldValue'
            },
            type: 'attribute'
          }, {
            name: 'positiveTargetFieldDisplayValue',
            attributeName: {
              localPart: 'positiveTargetFieldDisplayValue'
            },
            type: 'attribute'
          }, {
            name: 'negativeTargetFieldValue',
            attributeName: {
              localPart: 'negativeTargetFieldValue'
            },
            type: 'attribute'
          }, {
            name: 'negativeTargetFieldDisplayValue',
            attributeName: {
              localPart: 'negativeTargetFieldDisplayValue'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'DiscreteNode',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'derivedField',
            minOccurs: 0,
            collection: true,
            elementName: 'DerivedField',
            typeInfo: '.DerivedField'
          }, {
            name: 'discreteConditionalProbabilityOrValueProbability',
            required: true,
            collection: true,
            elementTypeInfos: [{
                elementName: 'DiscreteConditionalProbability',
                typeInfo: '.DiscreteConditionalProbability'
              }, {
                elementName: 'ValueProbability',
                typeInfo: '.ValueProbability'
              }],
            type: 'elements'
          }, {
            name: 'name',
            required: true,
            attributeName: {
              localPart: 'name'
            },
            type: 'attribute'
          }, {
            name: 'count',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'count'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'Residuals',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'array',
            required: true,
            elementName: 'Array',
            typeInfo: '.ArrayType'
          }]
      }, {
        localName: 'Denominator',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'nonseasonalFactor',
            elementName: 'NonseasonalFactor',
            typeInfo: '.NonseasonalFactor'
          }, {
            name: 'seasonalFactor',
            elementName: 'SeasonalFactor',
            typeInfo: '.SeasonalFactor'
          }]
      }, {
        localName: 'TrainingInstances',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'instanceFields',
            required: true,
            elementName: 'InstanceFields',
            typeInfo: '.InstanceFields'
          }, {
            name: 'tableLocator',
            required: true,
            elementName: 'TableLocator',
            typeInfo: '.TableLocator'
          }, {
            name: 'inlineTable',
            required: true,
            elementName: 'InlineTable',
            typeInfo: '.InlineTable'
          }, {
            name: 'isTransformed',
            typeInfo: 'Boolean',
            attributeName: {
              localPart: 'isTransformed'
            },
            type: 'attribute'
          }, {
            name: 'recordCount',
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'recordCount'
            },
            type: 'attribute'
          }, {
            name: 'fieldCount',
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'fieldCount'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'Characteristic',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'attribute',
            required: true,
            collection: true,
            elementName: 'Attribute',
            typeInfo: '.Attribute'
          }, {
            name: 'name',
            attributeName: {
              localPart: 'name'
            },
            type: 'attribute'
          }, {
            name: 'reasonCode',
            attributeName: {
              localPart: 'reasonCode'
            },
            type: 'attribute'
          }, {
            name: 'baselineScore',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'baselineScore'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'TimeAnchor',
        typeName: null,
        propertyInfos: [{
            name: 'timeCycle',
            minOccurs: 0,
            collection: true,
            elementName: 'TimeCycle',
            typeInfo: '.TimeCycle'
          }, {
            name: 'timeException',
            minOccurs: 0,
            maxOccurs: 2,
            collection: true,
            elementName: 'TimeException',
            typeInfo: '.TimeException'
          }, {
            name: 'type',
            attributeName: {
              localPart: 'type'
            },
            type: 'attribute'
          }, {
            name: 'offset',
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'offset'
            },
            type: 'attribute'
          }, {
            name: 'stepsize',
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'stepsize'
            },
            type: 'attribute'
          }, {
            name: 'displayName',
            attributeName: {
              localPart: 'displayName'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'TimeValue',
        typeName: null,
        propertyInfos: [{
            name: 'timestamp',
            elementName: 'Timestamp',
            typeInfo: '.Timestamp'
          }, {
            name: 'index',
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'index'
            },
            type: 'attribute'
          }, {
            name: 'time',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'time'
            },
            type: 'attribute'
          }, {
            name: 'value',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'value'
            },
            type: 'attribute'
          }, {
            name: 'standardError',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'standardError'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'ValueProbability',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'value',
            required: true,
            attributeName: {
              localPart: 'value'
            },
            type: 'attribute'
          }, {
            name: 'probability',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'probability'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'MiningField',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'name',
            required: true,
            attributeName: {
              localPart: 'name'
            },
            type: 'attribute'
          }, {
            name: 'usageType',
            attributeName: {
              localPart: 'usageType'
            },
            type: 'attribute'
          }, {
            name: 'optype',
            attributeName: {
              localPart: 'optype'
            },
            type: 'attribute'
          }, {
            name: 'importance',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'importance'
            },
            type: 'attribute'
          }, {
            name: 'outliers',
            attributeName: {
              localPart: 'outliers'
            },
            type: 'attribute'
          }, {
            name: 'lowValue',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'lowValue'
            },
            type: 'attribute'
          }, {
            name: 'highValue',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'highValue'
            },
            type: 'attribute'
          }, {
            name: 'missingValueReplacement',
            attributeName: {
              localPart: 'missingValueReplacement'
            },
            type: 'attribute'
          }, {
            name: 'missingValueTreatment',
            attributeName: {
              localPart: 'missingValueTreatment'
            },
            type: 'attribute'
          }, {
            name: 'invalidValueTreatment',
            attributeName: {
              localPart: 'invalidValueTreatment'
            },
            type: 'attribute'
          }, {
            name: 'invalidValueReplacement',
            attributeName: {
              localPart: 'invalidValueReplacement'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'Tanimoto',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }]
      }, {
        localName: 'AssociationRule',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'antecedent',
            required: true,
            attributeName: {
              localPart: 'antecedent'
            },
            type: 'attribute'
          }, {
            name: 'consequent',
            required: true,
            attributeName: {
              localPart: 'consequent'
            },
            type: 'attribute'
          }, {
            name: 'support',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'support'
            },
            type: 'attribute'
          }, {
            name: 'confidence',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'confidence'
            },
            type: 'attribute'
          }, {
            name: 'lift',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'lift'
            },
            type: 'attribute'
          }, {
            name: 'leverage',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'leverage'
            },
            type: 'attribute'
          }, {
            name: 'affinity',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'affinity'
            },
            type: 'attribute'
          }, {
            name: 'id',
            attributeName: {
              localPart: 'id'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'TextDocument',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'id',
            required: true,
            attributeName: {
              localPart: 'id'
            },
            type: 'attribute'
          }, {
            name: 'name',
            attributeName: {
              localPart: 'name'
            },
            type: 'attribute'
          }, {
            name: 'length',
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'length'
            },
            type: 'attribute'
          }, {
            name: 'file',
            attributeName: {
              localPart: 'file'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'LinearKernelType',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'description',
            attributeName: {
              localPart: 'description'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'AnomalyDetectionModel',
        typeName: null,
        propertyInfos: [{
            name: 'content',
            required: true,
            minOccurs: 2,
            collection: true,
            mixed: false,
            allowDom: false,
            elementTypeInfos: [{
                elementName: 'ClusteringModel',
                typeInfo: '.ClusteringModel'
              }, {
                elementName: 'Extension',
                typeInfo: '.Extension'
              }, {
                elementName: 'SequenceModel',
                typeInfo: '.SequenceModel'
              }, {
                elementName: 'AnomalyDetectionModel',
                typeInfo: '.AnomalyDetectionModel'
              }, {
                elementName: 'AssociationModel',
                typeInfo: '.AssociationModel'
              }, {
                elementName: 'GeneralRegressionModel',
                typeInfo: '.GeneralRegressionModel'
              }, {
                elementName: 'NearestNeighborModel',
                typeInfo: '.NearestNeighborModel'
              }, {
                elementName: 'Output',
                typeInfo: '.Output'
              }, {
                elementName: 'SupportVectorMachineModel',
                typeInfo: '.SupportVectorMachineModel'
              }, {
                elementName: 'NeuralNetwork',
                typeInfo: '.NeuralNetwork'
              }, {
                elementName: 'MiningModel',
                typeInfo: '.MiningModel'
              }, {
                elementName: 'BaselineModel',
                typeInfo: '.BaselineModel'
              }, {
                elementName: 'TextModel',
                typeInfo: '.TextModel'
              }, {
                elementName: 'TimeSeriesModel',
                typeInfo: '.TimeSeriesModel'
              }, {
                elementName: 'ModelVerification',
                typeInfo: '.ModelVerification'
              }, {
                elementName: 'TreeModel',
                typeInfo: '.TreeModel'
              }, {
                elementName: 'LocalTransformations',
                typeInfo: '.LocalTransformations'
              }, {
                elementName: 'Scorecard',
                typeInfo: '.Scorecard'
              }, {
                elementName: 'MeanClusterDistances',
                typeInfo: '.MeanClusterDistances'
              }, {
                elementName: 'MiningSchema',
                typeInfo: '.MiningSchema'
              }, {
                elementName: 'RegressionModel',
                typeInfo: '.RegressionModel'
              }, {
                elementName: 'RuleSetModel',
                typeInfo: '.RuleSetModel'
              }, {
                elementName: 'NaiveBayesModel',
                typeInfo: '.NaiveBayesModel'
              }, {
                elementName: 'BayesianNetworkModel',
                typeInfo: '.BayesianNetworkModel'
              }, {
                elementName: 'GaussianProcessModel',
                typeInfo: '.GaussianProcessModel'
              }],
            type: 'elementRefs'
          }, {
            name: 'modelName',
            attributeName: {
              localPart: 'modelName'
            },
            type: 'attribute'
          }, {
            name: 'algorithmName',
            attributeName: {
              localPart: 'algorithmName'
            },
            type: 'attribute'
          }, {
            name: 'functionName',
            required: true,
            attributeName: {
              localPart: 'functionName'
            },
            type: 'attribute'
          }, {
            name: 'algorithmType',
            required: true,
            attributeName: {
              localPart: 'algorithmType'
            },
            type: 'attribute'
          }, {
            name: 'sampleDataSize',
            attributeName: {
              localPart: 'sampleDataSize'
            },
            type: 'attribute'
          }, {
            name: 'isScorable',
            typeInfo: 'Boolean',
            attributeName: {
              localPart: 'isScorable'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'Delimiter',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'delimiter',
            required: true,
            attributeName: {
              localPart: 'delimiter'
            },
            type: 'attribute'
          }, {
            name: 'gap',
            required: true,
            attributeName: {
              localPart: 'gap'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'KNNInputs',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'knnInput',
            required: true,
            collection: true,
            elementName: 'KNNInput',
            typeInfo: '.KNNInput'
          }]
      }, {
        localName: 'NeuralOutputs',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'neuralOutput',
            required: true,
            collection: true,
            elementName: 'NeuralOutput',
            typeInfo: '.NeuralOutput'
          }, {
            name: 'numberOfOutputs',
            typeInfo: 'NonNegativeInteger',
            attributeName: {
              localPart: 'numberOfOutputs'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'Timestamp',
        typeName: null,
        propertyInfos: [{
            name: 'content',
            collection: true,
            allowDom: false,
            elementName: 'Extension',
            typeInfo: '.Extension',
            type: 'elementRef'
          }]
      }, {
        localName: 'SeasonalityExpoSmooth',
        typeName: null,
        propertyInfos: [{
            name: 'array',
            required: true,
            elementName: 'Array',
            typeInfo: '.ArrayType'
          }, {
            name: 'type',
            required: true,
            attributeName: {
              localPart: 'type'
            },
            type: 'attribute'
          }, {
            name: 'period',
            required: true,
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'period'
            },
            type: 'attribute'
          }, {
            name: 'unit',
            attributeName: {
              localPart: 'unit'
            },
            type: 'attribute'
          }, {
            name: 'phase',
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'phase'
            },
            type: 'attribute'
          }, {
            name: 'delta',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'delta'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'ConsequentSequence',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'sequenceReference',
            required: true,
            elementName: 'SequenceReference',
            typeInfo: '.SequenceReference'
          }, {
            name: 'time',
            elementName: 'Time',
            typeInfo: '.Time'
          }]
      }, {
        localName: 'UniformDistributionForBN',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'lower',
            required: true,
            elementName: 'Lower',
            typeInfo: '.Lower'
          }, {
            name: 'upper',
            required: true,
            elementName: 'Upper',
            typeInfo: '.Upper'
          }]
      }, {
        localName: 'Targets',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'target',
            required: true,
            collection: true,
            elementName: 'Target',
            typeInfo: '.Target'
          }]
      }, {
        localName: 'Covariances',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'matrix',
            required: true,
            elementName: 'Matrix',
            typeInfo: '.Matrix'
          }]
      }, {
        localName: 'ModelLiftGraph',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'liftGraph',
            required: true,
            elementName: 'LiftGraph',
            typeInfo: '.LiftGraph'
          }]
      }, {
        localName: 'TargetValueCounts',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'targetValueCount',
            required: true,
            collection: true,
            elementName: 'TargetValueCount',
            typeInfo: '.TargetValueCount'
          }]
      }, {
        localName: 'PredictiveModelQuality',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'confusionMatrix',
            elementName: 'ConfusionMatrix',
            typeInfo: '.ConfusionMatrix'
          }, {
            name: 'liftData',
            minOccurs: 0,
            collection: true,
            elementName: 'LiftData',
            typeInfo: '.LiftData'
          }, {
            name: 'roc',
            elementName: 'ROC',
            typeInfo: '.ROC'
          }, {
            name: 'targetField',
            required: true,
            attributeName: {
              localPart: 'targetField'
            },
            type: 'attribute'
          }, {
            name: 'dataName',
            attributeName: {
              localPart: 'dataName'
            },
            type: 'attribute'
          }, {
            name: 'dataUsage',
            attributeName: {
              localPart: 'dataUsage'
            },
            type: 'attribute'
          }, {
            name: 'meanError',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'meanError'
            },
            type: 'attribute'
          }, {
            name: 'meanAbsoluteError',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'meanAbsoluteError'
            },
            type: 'attribute'
          }, {
            name: 'meanSquaredError',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'meanSquaredError'
            },
            type: 'attribute'
          }, {
            name: 'rootMeanSquaredError',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'rootMeanSquaredError'
            },
            type: 'attribute'
          }, {
            name: 'rSquared',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'r-squared'
            },
            type: 'attribute'
          }, {
            name: 'adjRSquared',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'adj-r-squared'
            },
            type: 'attribute'
          }, {
            name: 'sumSquaredError',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'sumSquaredError'
            },
            type: 'attribute'
          }, {
            name: 'sumSquaredRegression',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'sumSquaredRegression'
            },
            type: 'attribute'
          }, {
            name: 'numOfRecords',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'numOfRecords'
            },
            type: 'attribute'
          }, {
            name: 'numOfRecordsWeighted',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'numOfRecordsWeighted'
            },
            type: 'attribute'
          }, {
            name: 'numOfPredictors',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'numOfPredictors'
            },
            type: 'attribute'
          }, {
            name: 'degreesOfFreedom',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'degreesOfFreedom'
            },
            type: 'attribute'
          }, {
            name: 'fStatistic',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'fStatistic'
            },
            type: 'attribute'
          }, {
            name: 'aic',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'AIC'
            },
            type: 'attribute'
          }, {
            name: 'bic',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'BIC'
            },
            type: 'attribute'
          }, {
            name: 'aiCc',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'AICc'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'SetReference',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'setId',
            required: true,
            attributeName: {
              localPart: 'setId'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'ComparisonMeasure',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'euclidean',
            required: true,
            typeInfo: '.Euclidean'
          }, {
            name: 'squaredEuclidean',
            required: true,
            typeInfo: '.SquaredEuclidean'
          }, {
            name: 'chebychev',
            required: true,
            typeInfo: '.Chebychev'
          }, {
            name: 'cityBlock',
            required: true,
            typeInfo: '.CityBlock'
          }, {
            name: 'minkowski',
            required: true,
            typeInfo: '.Minkowski'
          }, {
            name: 'simpleMatching',
            required: true,
            typeInfo: '.SimpleMatching'
          }, {
            name: 'jaccard',
            required: true,
            typeInfo: '.Jaccard'
          }, {
            name: 'tanimoto',
            required: true,
            typeInfo: '.Tanimoto'
          }, {
            name: 'binarySimilarity',
            required: true,
            typeInfo: '.BinarySimilarity'
          }, {
            name: 'kind',
            required: true,
            attributeName: {
              localPart: 'kind'
            },
            type: 'attribute'
          }, {
            name: 'compareFunction',
            attributeName: {
              localPart: 'compareFunction'
            },
            type: 'attribute'
          }, {
            name: 'minimum',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'minimum'
            },
            type: 'attribute'
          }, {
            name: 'maximum',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'maximum'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'LiftGraph',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'xCoordinates',
            required: true,
            elementName: 'XCoordinates',
            typeInfo: '.XCoordinates'
          }, {
            name: 'yCoordinates',
            required: true,
            elementName: 'YCoordinates',
            typeInfo: '.YCoordinates'
          }, {
            name: 'boundaryValues',
            elementName: 'BoundaryValues',
            typeInfo: '.BoundaryValues'
          }, {
            name: 'boundaryValueMeans',
            elementName: 'BoundaryValueMeans',
            typeInfo: '.BoundaryValueMeans'
          }]
      }, {
        localName: 'TreeModel',
        typeName: null,
        propertyInfos: [{
            name: 'content',
            required: true,
            minOccurs: 2,
            collection: true,
            mixed: false,
            allowDom: false,
            elementTypeInfos: [{
                elementName: 'ModelExplanation',
                typeInfo: '.ModelExplanation'
              }, {
                elementName: 'ModelVerification',
                typeInfo: '.ModelVerification'
              }, {
                elementName: 'LocalTransformations',
                typeInfo: '.LocalTransformations'
              }, {
                elementName: 'Extension',
                typeInfo: '.Extension'
              }, {
                elementName: 'ModelStats',
                typeInfo: '.ModelStats'
              }, {
                elementName: 'Output',
                typeInfo: '.Output'
              }, {
                elementName: 'Targets',
                typeInfo: '.Targets'
              }, {
                elementName: 'Node',
                typeInfo: '.Node'
              }, {
                elementName: 'MiningSchema',
                typeInfo: '.MiningSchema'
              }],
            type: 'elementRefs'
          }, {
            name: 'modelName',
            attributeName: {
              localPart: 'modelName'
            },
            type: 'attribute'
          }, {
            name: 'functionName',
            required: true,
            attributeName: {
              localPart: 'functionName'
            },
            type: 'attribute'
          }, {
            name: 'algorithmName',
            attributeName: {
              localPart: 'algorithmName'
            },
            type: 'attribute'
          }, {
            name: 'missingValueStrategy',
            attributeName: {
              localPart: 'missingValueStrategy'
            },
            type: 'attribute'
          }, {
            name: 'missingValuePenalty',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'missingValuePenalty'
            },
            type: 'attribute'
          }, {
            name: 'noTrueChildStrategy',
            attributeName: {
              localPart: 'noTrueChildStrategy'
            },
            type: 'attribute'
          }, {
            name: 'splitCharacteristic',
            attributeName: {
              localPart: 'splitCharacteristic'
            },
            type: 'attribute'
          }, {
            name: 'isScorable',
            typeInfo: 'Boolean',
            attributeName: {
              localPart: 'isScorable'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'ComplexPartialScore',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'constant',
            required: true,
            elementName: 'Constant',
            typeInfo: '.Constant'
          }, {
            name: 'fieldRef',
            required: true,
            elementName: 'FieldRef',
            typeInfo: '.FieldRef'
          }, {
            name: 'normContinuous',
            required: true,
            elementName: 'NormContinuous',
            typeInfo: '.NormContinuous'
          }, {
            name: 'normDiscrete',
            required: true,
            elementName: 'NormDiscrete',
            typeInfo: '.NormDiscrete'
          }, {
            name: 'discretize',
            required: true,
            elementName: 'Discretize',
            typeInfo: '.Discretize'
          }, {
            name: 'mapValues',
            required: true,
            elementName: 'MapValues',
            typeInfo: '.MapValues'
          }, {
            name: 'textIndex',
            required: true,
            elementName: 'TextIndex',
            typeInfo: '.TextIndex'
          }, {
            name: 'apply',
            required: true,
            elementName: 'Apply',
            typeInfo: '.Apply'
          }, {
            name: 'aggregate',
            required: true,
            elementName: 'Aggregate',
            typeInfo: '.Aggregate'
          }, {
            name: 'lag',
            required: true,
            elementName: 'Lag',
            typeInfo: '.Lag'
          }]
      }, {
        localName: 'FieldColumnPair',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'field',
            required: true,
            attributeName: {
              localPart: 'field'
            },
            type: 'attribute'
          }, {
            name: 'column',
            required: true,
            attributeName: {
              localPart: 'column'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'VarianceCoefficients',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'pastVariances',
            elementName: 'PastVariances',
            typeInfo: '.PastVariances'
          }, {
            name: 'maCoefficients',
            elementName: 'MACoefficients',
            typeInfo: '.MACoefficients'
          }]
      }, {
        localName: 'Variance',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'constant',
            required: true,
            elementName: 'Constant',
            typeInfo: '.Constant'
          }, {
            name: 'fieldRef',
            required: true,
            elementName: 'FieldRef',
            typeInfo: '.FieldRef'
          }, {
            name: 'normContinuous',
            required: true,
            elementName: 'NormContinuous',
            typeInfo: '.NormContinuous'
          }, {
            name: 'normDiscrete',
            required: true,
            elementName: 'NormDiscrete',
            typeInfo: '.NormDiscrete'
          }, {
            name: 'discretize',
            required: true,
            elementName: 'Discretize',
            typeInfo: '.Discretize'
          }, {
            name: 'mapValues',
            required: true,
            elementName: 'MapValues',
            typeInfo: '.MapValues'
          }, {
            name: 'textIndex',
            required: true,
            elementName: 'TextIndex',
            typeInfo: '.TextIndex'
          }, {
            name: 'apply',
            required: true,
            elementName: 'Apply',
            typeInfo: '.Apply'
          }, {
            name: 'aggregate',
            required: true,
            elementName: 'Aggregate',
            typeInfo: '.Aggregate'
          }, {
            name: 'lag',
            required: true,
            elementName: 'Lag',
            typeInfo: '.Lag'
          }]
      }, {
        localName: 'MatCell',
        typeName: null,
        propertyInfos: [{
            name: 'value',
            type: 'value'
          }, {
            name: 'row',
            required: true,
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'row'
            },
            type: 'attribute'
          }, {
            name: 'col',
            required: true,
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'col'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'ContinuousConditionalProbability',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'parentValue',
            minOccurs: 0,
            collection: true,
            elementName: 'ParentValue',
            typeInfo: '.ParentValue'
          }, {
            name: 'continuousDistribution',
            required: true,
            collection: true,
            elementName: 'ContinuousDistribution',
            typeInfo: '.ContinuousDistribution'
          }, {
            name: 'count',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'count'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'Value',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'value',
            required: true,
            attributeName: {
              localPart: 'value'
            },
            type: 'attribute'
          }, {
            name: 'displayValue',
            attributeName: {
              localPart: 'displayValue'
            },
            type: 'attribute'
          }, {
            name: 'property',
            attributeName: {
              localPart: 'property'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'BayesOutput',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'targetValueCounts',
            required: true,
            elementName: 'TargetValueCounts',
            typeInfo: '.TargetValueCounts'
          }, {
            name: 'fieldName',
            required: true,
            attributeName: {
              localPart: 'fieldName'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'TextModelNormalization',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'localTermWeights',
            attributeName: {
              localPart: 'localTermWeights'
            },
            type: 'attribute'
          }, {
            name: 'globalTermWeights',
            attributeName: {
              localPart: 'globalTermWeights'
            },
            type: 'attribute'
          }, {
            name: 'documentNormalization',
            attributeName: {
              localPart: 'documentNormalization'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'BoundaryValueMeans',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'array',
            required: true,
            elementName: 'Array',
            typeInfo: '.ArrayType'
          }]
      }, {
        localName: 'TableLocator',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }]
      }, {
        localName: 'ResultField',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'name',
            required: true,
            attributeName: {
              localPart: 'name'
            },
            type: 'attribute'
          }, {
            name: 'displayName',
            attributeName: {
              localPart: 'displayName'
            },
            type: 'attribute'
          }, {
            name: 'optype',
            attributeName: {
              localPart: 'optype'
            },
            type: 'attribute'
          }, {
            name: 'dataType',
            attributeName: {
              localPart: 'dataType'
            },
            type: 'attribute'
          }, {
            name: 'feature',
            attributeName: {
              localPart: 'feature'
            },
            type: 'attribute'
          }, {
            name: 'value',
            attributeName: {
              localPart: 'value'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'Jaccard',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }]
      }, {
        localName: 'ARDSquaredExponentialKernel',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'lambda',
            minOccurs: 0,
            collection: true,
            elementName: 'Lambda',
            typeInfo: '.Lambda'
          }, {
            name: 'description',
            attributeName: {
              localPart: 'description'
            },
            type: 'attribute'
          }, {
            name: 'gamma',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'gamma'
            },
            type: 'attribute'
          }, {
            name: 'noiseVariance',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'noiseVariance'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'Aggregate',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'field',
            required: true,
            attributeName: {
              localPart: 'field'
            },
            type: 'attribute'
          }, {
            name: 'function',
            required: true,
            attributeName: {
              localPart: 'function'
            },
            type: 'attribute'
          }, {
            name: 'groupField',
            attributeName: {
              localPart: 'groupField'
            },
            type: 'attribute'
          }, {
            name: 'sqlWhere',
            attributeName: {
              localPart: 'sqlWhere'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'OutlierEffect',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'type',
            required: true,
            attributeName: {
              localPart: 'type'
            },
            type: 'attribute'
          }, {
            name: 'startTime',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'startTime'
            },
            type: 'attribute'
          }, {
            name: 'magnitude',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'magnitude'
            },
            type: 'attribute'
          }, {
            name: 'dampingCoefficient',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'dampingCoefficient'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'Predictor',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'categories',
            elementName: 'Categories',
            typeInfo: '.Categories'
          }, {
            name: 'matrix',
            elementName: 'Matrix',
            typeInfo: '.Matrix'
          }, {
            name: 'name',
            required: true,
            attributeName: {
              localPart: 'name'
            },
            type: 'attribute'
          }, {
            name: 'contrastMatrixType',
            attributeName: {
              localPart: 'contrastMatrixType'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'TransformationDictionary',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'defineFunction',
            minOccurs: 0,
            collection: true,
            elementName: 'DefineFunction',
            typeInfo: '.DefineFunction'
          }, {
            name: 'derivedField',
            minOccurs: 0,
            collection: true,
            elementName: 'DerivedField',
            typeInfo: '.DerivedField'
          }]
      }, {
        localName: 'NeuralOutput',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'derivedField',
            required: true,
            elementName: 'DerivedField',
            typeInfo: '.DerivedField'
          }, {
            name: 'outputNeuron',
            required: true,
            attributeName: {
              localPart: 'outputNeuron'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'GaussianDistribution',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'mean',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'mean'
            },
            type: 'attribute'
          }, {
            name: 'variance',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'variance'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'SigmoidKernelType',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'description',
            attributeName: {
              localPart: 'description'
            },
            type: 'attribute'
          }, {
            name: 'gamma',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'gamma'
            },
            type: 'attribute'
          }, {
            name: 'coef0',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'coef0'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'UniformDistribution',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'lower',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'lower'
            },
            type: 'attribute'
          }, {
            name: 'upper',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'upper'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'CompoundPredicate',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'simplePredicateOrCompoundPredicateOrSimpleSetPredicate',
            required: true,
            minOccurs: 2,
            collection: true,
            elementTypeInfos: [{
                elementName: 'SimplePredicate',
                typeInfo: '.SimplePredicate'
              }, {
                elementName: 'CompoundPredicate',
                typeInfo: '.CompoundPredicate'
              }, {
                elementName: 'SimpleSetPredicate',
                typeInfo: '.SimpleSetPredicate'
              }, {
                elementName: 'True',
                typeInfo: '.True'
              }, {
                elementName: 'False',
                typeInfo: '.False'
              }],
            type: 'elements'
          }, {
            name: 'booleanOperator',
            required: true,
            attributeName: {
              localPart: 'booleanOperator'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'BaseCumHazardTables',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'baselineStratum',
            required: true,
            collection: true,
            elementName: 'BaselineStratum',
            typeInfo: '.BaselineStratum'
          }, {
            name: 'baselineCell',
            required: true,
            collection: true,
            elementName: 'BaselineCell',
            typeInfo: '.BaselineCell'
          }, {
            name: 'maxTime',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'maxTime'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'Baseline',
        typeName: null,
        propertyInfos: [{
            name: 'anyDistribution',
            required: true,
            elementName: 'AnyDistribution',
            typeInfo: '.AnyDistribution'
          }, {
            name: 'gaussianDistribution',
            required: true,
            elementName: 'GaussianDistribution',
            typeInfo: '.GaussianDistribution'
          }, {
            name: 'poissonDistribution',
            required: true,
            elementName: 'PoissonDistribution',
            typeInfo: '.PoissonDistribution'
          }, {
            name: 'uniformDistribution',
            required: true,
            elementName: 'UniformDistribution',
            typeInfo: '.UniformDistribution'
          }, {
            name: 'countTable',
            required: true,
            elementName: 'CountTable',
            typeInfo: '.COUNTTABLETYPE'
          }, {
            name: 'normalizedCountTable',
            required: true,
            elementName: 'NormalizedCountTable',
            typeInfo: '.COUNTTABLETYPE'
          }, {
            name: 'fieldRef',
            required: true,
            minOccurs: 2,
            collection: true,
            elementName: 'FieldRef',
            typeInfo: '.FieldRef'
          }]
      }, {
        localName: 'TransitionMatrix',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'matrix',
            required: true,
            elementName: 'Matrix',
            typeInfo: '.Matrix'
          }]
      }, {
        localName: 'Sequence',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'setReference',
            required: true,
            elementName: 'SetReference',
            typeInfo: '.SetReference'
          }, {
            name: 'extensionAndDelimiterAndTime',
            minOccurs: 0,
            collection: true,
            elementTypeInfos: [{
                elementName: 'Extension',
                typeInfo: '.Extension'
              }, {
                elementName: 'Delimiter',
                typeInfo: '.Delimiter'
              }, {
                elementName: 'Time',
                typeInfo: '.Time'
              }, {
                elementName: 'SetReference',
                typeInfo: '.SetReference'
              }],
            type: 'elements'
          }, {
            name: 'time',
            elementName: 'Time',
            typeInfo: '.Time'
          }, {
            name: 'id',
            required: true,
            attributeName: {
              localPart: 'id'
            },
            type: 'attribute'
          }, {
            name: 'numberOfSets',
            typeInfo: 'NonNegativeInteger',
            attributeName: {
              localPart: 'numberOfSets'
            },
            type: 'attribute'
          }, {
            name: 'occurrence',
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'occurrence'
            },
            type: 'attribute'
          }, {
            name: 'support',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'support'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'InstanceField',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'field',
            required: true,
            attributeName: {
              localPart: 'field'
            },
            type: 'attribute'
          }, {
            name: 'column',
            attributeName: {
              localPart: 'column'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'MeasurementMatrix',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'matrix',
            required: true,
            elementName: 'Matrix',
            typeInfo: '.Matrix'
          }]
      }, {
        localName: 'DataDictionary',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'dataField',
            required: true,
            collection: true,
            elementName: 'DataField',
            typeInfo: '.DataField'
          }, {
            name: 'taxonomy',
            minOccurs: 0,
            collection: true,
            elementName: 'Taxonomy',
            typeInfo: '.Taxonomy'
          }, {
            name: 'numberOfFields',
            typeInfo: 'NonNegativeInteger',
            attributeName: {
              localPart: 'numberOfFields'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'ParamMatrix',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'pCell',
            minOccurs: 0,
            collection: true,
            elementName: 'PCell',
            typeInfo: '.PCell'
          }]
      }, {
        localName: 'StateSpaceModel',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'stateVector',
            elementName: 'StateVector',
            typeInfo: '.StateVector'
          }, {
            name: 'transitionMatrix',
            elementName: 'TransitionMatrix',
            typeInfo: '.TransitionMatrix'
          }, {
            name: 'measurementMatrix',
            elementName: 'MeasurementMatrix',
            typeInfo: '.MeasurementMatrix'
          }, {
            name: 'psiVector',
            elementName: 'PsiVector',
            typeInfo: '.PsiVector'
          }, {
            name: 'dynamicRegressor',
            minOccurs: 0,
            collection: true,
            elementName: 'DynamicRegressor',
            typeInfo: '.DynamicRegressor'
          }, {
            name: 'variance',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'variance'
            },
            type: 'attribute'
          }, {
            name: 'period',
            typeInfo: 'AnySimpleType',
            attributeName: {
              localPart: 'period'
            },
            type: 'attribute'
          }, {
            name: 'intercept',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'intercept'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'DiscrStats',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'array',
            minOccurs: 0,
            maxOccurs: 2,
            collection: true,
            elementName: 'Array',
            typeInfo: '.ArrayType'
          }, {
            name: 'modalValue',
            attributeName: {
              localPart: 'modalValue'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'HVector',
        typeName: null,
        propertyInfos: [{
            name: 'array',
            required: true,
            elementName: 'Array',
            typeInfo: '.ArrayType'
          }]
      }, {
        localName: 'MultivariateStats',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'multivariateStat',
            required: true,
            collection: true,
            elementName: 'MultivariateStat',
            typeInfo: '.MultivariateStat'
          }, {
            name: 'targetCategory',
            attributeName: {
              localPart: 'targetCategory'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'BayesInput',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'targetValueStats',
            required: true,
            elementName: 'TargetValueStats',
            typeInfo: '.TargetValueStats'
          }, {
            name: 'derivedField',
            elementName: 'DerivedField',
            typeInfo: '.DerivedField'
          }, {
            name: 'pairCounts',
            required: true,
            collection: true,
            elementName: 'PairCounts',
            typeInfo: '.PairCounts'
          }, {
            name: 'fieldName',
            required: true,
            attributeName: {
              localPart: 'fieldName'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'Minkowski',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'pParameter',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'p-parameter'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'NaiveBayesModel',
        typeName: null,
        propertyInfos: [{
            name: 'content',
            required: true,
            minOccurs: 3,
            collection: true,
            mixed: false,
            allowDom: false,
            elementTypeInfos: [{
                elementName: 'ModelExplanation',
                typeInfo: '.ModelExplanation'
              }, {
                elementName: 'ModelVerification',
                typeInfo: '.ModelVerification'
              }, {
                elementName: 'LocalTransformations',
                typeInfo: '.LocalTransformations'
              }, {
                elementName: 'BayesInputs',
                typeInfo: '.BayesInputs'
              }, {
                elementName: 'Extension',
                typeInfo: '.Extension'
              }, {
                elementName: 'ModelStats',
                typeInfo: '.ModelStats'
              }, {
                elementName: 'BayesOutput',
                typeInfo: '.BayesOutput'
              }, {
                elementName: 'Output',
                typeInfo: '.Output'
              }, {
                elementName: 'Targets',
                typeInfo: '.Targets'
              }, {
                elementName: 'MiningSchema',
                typeInfo: '.MiningSchema'
              }],
            type: 'elementRefs'
          }, {
            name: 'modelName',
            attributeName: {
              localPart: 'modelName'
            },
            type: 'attribute'
          }, {
            name: 'threshold',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'threshold'
            },
            type: 'attribute'
          }, {
            name: 'functionName',
            required: true,
            attributeName: {
              localPart: 'functionName'
            },
            type: 'attribute'
          }, {
            name: 'algorithmName',
            attributeName: {
              localPart: 'algorithmName'
            },
            type: 'attribute'
          }, {
            name: 'isScorable',
            typeInfo: 'Boolean',
            attributeName: {
              localPart: 'isScorable'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'TargetValue',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'partition',
            elementName: 'Partition',
            typeInfo: '.Partition'
          }, {
            name: 'value',
            attributeName: {
              localPart: 'value'
            },
            type: 'attribute'
          }, {
            name: 'displayValue',
            attributeName: {
              localPart: 'displayValue'
            },
            type: 'attribute'
          }, {
            name: 'priorProbability',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'priorProbability'
            },
            type: 'attribute'
          }, {
            name: 'defaultValue',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'defaultValue'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'SequenceModel',
        typeName: null,
        propertyInfos: [{
            name: 'content',
            required: true,
            minOccurs: 2,
            collection: true,
            mixed: false,
            allowDom: false,
            elementTypeInfos: [{
                elementName: 'Item',
                typeInfo: '.Item'
              }, {
                elementName: 'LocalTransformations',
                typeInfo: '.LocalTransformations'
              }, {
                elementName: 'Extension',
                typeInfo: '.Extension'
              }, {
                elementName: 'Constraints',
                typeInfo: '.Constraints'
              }, {
                elementName: 'ModelStats',
                typeInfo: '.ModelStats'
              }, {
                elementName: 'SetPredicate',
                typeInfo: '.SetPredicate'
              }, {
                elementName: 'Itemset',
                typeInfo: '.Itemset'
              }, {
                elementName: 'SequenceRule',
                typeInfo: '.SequenceRule'
              }, {
                elementName: 'MiningSchema',
                typeInfo: '.MiningSchema'
              }, {
                elementName: 'Sequence',
                typeInfo: '.Sequence'
              }],
            type: 'elementRefs'
          }, {
            name: 'modelName',
            attributeName: {
              localPart: 'modelName'
            },
            type: 'attribute'
          }, {
            name: 'functionName',
            required: true,
            attributeName: {
              localPart: 'functionName'
            },
            type: 'attribute'
          }, {
            name: 'algorithmName',
            attributeName: {
              localPart: 'algorithmName'
            },
            type: 'attribute'
          }, {
            name: 'numberOfTransactions',
            typeInfo: 'NonNegativeInteger',
            attributeName: {
              localPart: 'numberOfTransactions'
            },
            type: 'attribute'
          }, {
            name: 'maxNumberOfItemsPerTransaction',
            typeInfo: 'NonNegativeInteger',
            attributeName: {
              localPart: 'maxNumberOfItemsPerTransaction'
            },
            type: 'attribute'
          }, {
            name: 'avgNumberOfItemsPerTransaction',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'avgNumberOfItemsPerTransaction'
            },
            type: 'attribute'
          }, {
            name: 'numberOfTransactionGroups',
            typeInfo: 'NonNegativeInteger',
            attributeName: {
              localPart: 'numberOfTransactionGroups'
            },
            type: 'attribute'
          }, {
            name: 'maxNumberOfTAsPerTAGroup',
            typeInfo: 'NonNegativeInteger',
            attributeName: {
              localPart: 'maxNumberOfTAsPerTAGroup'
            },
            type: 'attribute'
          }, {
            name: 'avgNumberOfTAsPerTAGroup',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'avgNumberOfTAsPerTAGroup'
            },
            type: 'attribute'
          }, {
            name: 'isScorable',
            typeInfo: 'Boolean',
            attributeName: {
              localPart: 'isScorable'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'GeneralRegressionModel',
        typeName: null,
        propertyInfos: [{
            name: 'content',
            required: true,
            minOccurs: 4,
            collection: true,
            mixed: false,
            allowDom: false,
            elementTypeInfos: [{
                elementName: 'ModelExplanation',
                typeInfo: '.ModelExplanation'
              }, {
                elementName: 'ModelVerification',
                typeInfo: '.ModelVerification'
              }, {
                elementName: 'LocalTransformations',
                typeInfo: '.LocalTransformations'
              }, {
                elementName: 'CovariateList',
                typeInfo: '.CovariateList'
              }, {
                elementName: 'Extension',
                typeInfo: '.Extension'
              }, {
                elementName: 'ParameterList',
                typeInfo: '.ParameterList'
              }, {
                elementName: 'ParamMatrix',
                typeInfo: '.ParamMatrix'
              }, {
                elementName: 'Output',
                typeInfo: '.Output'
              }, {
                elementName: 'FactorList',
                typeInfo: '.FactorList'
              }, {
                elementName: 'Targets',
                typeInfo: '.Targets'
              }, {
                elementName: 'MiningSchema',
                typeInfo: '.MiningSchema'
              }, {
                elementName: 'EventValues',
                typeInfo: '.EventValues'
              }, {
                elementName: 'PPMatrix',
                typeInfo: '.PPMatrix'
              }, {
                elementName: 'BaseCumHazardTables',
                typeInfo: '.BaseCumHazardTables'
              }, {
                elementName: 'ModelStats',
                typeInfo: '.ModelStats'
              }, {
                elementName: 'PCovMatrix',
                typeInfo: '.PCovMatrix'
              }],
            type: 'elementRefs'
          }, {
            name: 'targetVariableName',
            attributeName: {
              localPart: 'targetVariableName'
            },
            type: 'attribute'
          }, {
            name: 'modelType',
            required: true,
            attributeName: {
              localPart: 'modelType'
            },
            type: 'attribute'
          }, {
            name: 'modelName',
            attributeName: {
              localPart: 'modelName'
            },
            type: 'attribute'
          }, {
            name: 'functionName',
            required: true,
            attributeName: {
              localPart: 'functionName'
            },
            type: 'attribute'
          }, {
            name: 'algorithmName',
            attributeName: {
              localPart: 'algorithmName'
            },
            type: 'attribute'
          }, {
            name: 'targetReferenceCategory',
            attributeName: {
              localPart: 'targetReferenceCategory'
            },
            type: 'attribute'
          }, {
            name: 'cumulativeLink',
            attributeName: {
              localPart: 'cumulativeLink'
            },
            type: 'attribute'
          }, {
            name: 'linkFunction',
            attributeName: {
              localPart: 'linkFunction'
            },
            type: 'attribute'
          }, {
            name: 'linkParameter',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'linkParameter'
            },
            type: 'attribute'
          }, {
            name: 'trialsVariable',
            attributeName: {
              localPart: 'trialsVariable'
            },
            type: 'attribute'
          }, {
            name: 'trialsValue',
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'trialsValue'
            },
            type: 'attribute'
          }, {
            name: 'distribution',
            attributeName: {
              localPart: 'distribution'
            },
            type: 'attribute'
          }, {
            name: 'distParameter',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'distParameter'
            },
            type: 'attribute'
          }, {
            name: 'offsetVariable',
            attributeName: {
              localPart: 'offsetVariable'
            },
            type: 'attribute'
          }, {
            name: 'offsetValue',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'offsetValue'
            },
            type: 'attribute'
          }, {
            name: 'modelDF',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'modelDF'
            },
            type: 'attribute'
          }, {
            name: 'endTimeVariable',
            attributeName: {
              localPart: 'endTimeVariable'
            },
            type: 'attribute'
          }, {
            name: 'startTimeVariable',
            attributeName: {
              localPart: 'startTimeVariable'
            },
            type: 'attribute'
          }, {
            name: 'subjectIDVariable',
            attributeName: {
              localPart: 'subjectIDVariable'
            },
            type: 'attribute'
          }, {
            name: 'statusVariable',
            attributeName: {
              localPart: 'statusVariable'
            },
            type: 'attribute'
          }, {
            name: 'baselineStrataVariable',
            attributeName: {
              localPart: 'baselineStrataVariable'
            },
            type: 'attribute'
          }, {
            name: 'isScorable',
            typeInfo: 'Boolean',
            attributeName: {
              localPart: 'isScorable'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'AntecedentSequence',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'sequenceReference',
            required: true,
            elementName: 'SequenceReference',
            typeInfo: '.SequenceReference'
          }, {
            name: 'time',
            elementName: 'Time',
            typeInfo: '.Time'
          }]
      }, {
        localName: 'Target',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'targetValue',
            minOccurs: 0,
            collection: true,
            elementName: 'TargetValue',
            typeInfo: '.TargetValue'
          }, {
            name: 'field',
            attributeName: {
              localPart: 'field'
            },
            type: 'attribute'
          }, {
            name: 'optype',
            attributeName: {
              localPart: 'optype'
            },
            type: 'attribute'
          }, {
            name: 'castInteger',
            attributeName: {
              localPart: 'castInteger'
            },
            type: 'attribute'
          }, {
            name: 'min',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'min'
            },
            type: 'attribute'
          }, {
            name: 'max',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'max'
            },
            type: 'attribute'
          }, {
            name: 'rescaleConstant',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'rescaleConstant'
            },
            type: 'attribute'
          }, {
            name: 'rescaleFactor',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'rescaleFactor'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'Constraints',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'minimumNumberOfItems',
            typeInfo: 'NonNegativeInteger',
            attributeName: {
              localPart: 'minimumNumberOfItems'
            },
            type: 'attribute'
          }, {
            name: 'maximumNumberOfItems',
            typeInfo: 'NonNegativeInteger',
            attributeName: {
              localPart: 'maximumNumberOfItems'
            },
            type: 'attribute'
          }, {
            name: 'minimumNumberOfAntecedentItems',
            typeInfo: 'NonNegativeInteger',
            attributeName: {
              localPart: 'minimumNumberOfAntecedentItems'
            },
            type: 'attribute'
          }, {
            name: 'maximumNumberOfAntecedentItems',
            typeInfo: 'NonNegativeInteger',
            attributeName: {
              localPart: 'maximumNumberOfAntecedentItems'
            },
            type: 'attribute'
          }, {
            name: 'minimumNumberOfConsequentItems',
            typeInfo: 'NonNegativeInteger',
            attributeName: {
              localPart: 'minimumNumberOfConsequentItems'
            },
            type: 'attribute'
          }, {
            name: 'maximumNumberOfConsequentItems',
            typeInfo: 'NonNegativeInteger',
            attributeName: {
              localPart: 'maximumNumberOfConsequentItems'
            },
            type: 'attribute'
          }, {
            name: 'minimumSupport',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'minimumSupport'
            },
            type: 'attribute'
          }, {
            name: 'minimumConfidence',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'minimumConfidence'
            },
            type: 'attribute'
          }, {
            name: 'minimumLift',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'minimumLift'
            },
            type: 'attribute'
          }, {
            name: 'minimumTotalSequenceTime',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'minimumTotalSequenceTime'
            },
            type: 'attribute'
          }, {
            name: 'maximumTotalSequenceTime',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'maximumTotalSequenceTime'
            },
            type: 'attribute'
          }, {
            name: 'minimumItemsetSeparationTime',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'minimumItemsetSeparationTime'
            },
            type: 'attribute'
          }, {
            name: 'maximumItemsetSeparationTime',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'maximumItemsetSeparationTime'
            },
            type: 'attribute'
          }, {
            name: 'minimumAntConsSeparationTime',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'minimumAntConsSeparationTime'
            },
            type: 'attribute'
          }, {
            name: 'maximumAntConsSeparationTime',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'maximumAntConsSeparationTime'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'CompoundRule',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'simplePredicate',
            required: true,
            elementName: 'SimplePredicate',
            typeInfo: '.SimplePredicate'
          }, {
            name: 'compoundPredicate',
            required: true,
            elementName: 'CompoundPredicate',
            typeInfo: '.CompoundPredicate'
          }, {
            name: 'simpleSetPredicate',
            required: true,
            elementName: 'SimpleSetPredicate',
            typeInfo: '.SimpleSetPredicate'
          }, {
            name: '_true',
            required: true,
            elementName: 'True',
            typeInfo: '.True'
          }, {
            name: '_false',
            required: true,
            elementName: 'False',
            typeInfo: '.False'
          }, {
            name: 'rule',
            required: true,
            collection: true,
            elementTypeInfos: [{
                elementName: 'SimpleRule',
                typeInfo: '.SimpleRule'
              }, {
                elementName: 'CompoundRule',
                typeInfo: '.CompoundRule'
              }],
            type: 'elements'
          }]
      }, {
        localName: 'Node',
        typeName: null,
        propertyInfos: [{
            name: 'content',
            required: true,
            collection: true,
            mixed: false,
            allowDom: false,
            elementTypeInfos: [{
                elementName: 'CompoundPredicate',
                typeInfo: '.CompoundPredicate'
              }, {
                elementName: 'True',
                typeInfo: '.True'
              }, {
                elementName: 'SimplePredicate',
                typeInfo: '.SimplePredicate'
              }, {
                elementName: 'SimpleSetPredicate',
                typeInfo: '.SimpleSetPredicate'
              }, {
                elementName: 'DecisionTree',
                typeInfo: '.DecisionTree'
              }, {
                elementName: 'Partition',
                typeInfo: '.Partition'
              }, {
                elementName: 'Extension',
                typeInfo: '.Extension'
              }, {
                elementName: 'False',
                typeInfo: '.False'
              }, {
                elementName: 'Regression',
                typeInfo: '.Regression'
              }, {
                elementName: 'Node',
                typeInfo: '.Node'
              }, {
                elementName: 'ScoreDistribution',
                typeInfo: '.ScoreDistribution'
              }],
            type: 'elementRefs'
          }, {
            name: 'id',
            attributeName: {
              localPart: 'id'
            },
            type: 'attribute'
          }, {
            name: 'score',
            attributeName: {
              localPart: 'score'
            },
            type: 'attribute'
          }, {
            name: 'recordCount',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'recordCount'
            },
            type: 'attribute'
          }, {
            name: 'defaultChild',
            attributeName: {
              localPart: 'defaultChild'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'PsiVector',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'array',
            required: true,
            elementName: 'Array',
            typeInfo: '.ArrayType'
          }, {
            name: 'targetField',
            attributeName: {
              localPart: 'targetField'
            },
            type: 'attribute'
          }, {
            name: 'variance',
            attributeName: {
              localPart: 'variance'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'LiftData',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'modelLiftGraph',
            required: true,
            elementName: 'ModelLiftGraph',
            typeInfo: '.ModelLiftGraph'
          }, {
            name: 'optimumLiftGraph',
            elementName: 'OptimumLiftGraph',
            typeInfo: '.OptimumLiftGraph'
          }, {
            name: 'randomLiftGraph',
            elementName: 'RandomLiftGraph',
            typeInfo: '.RandomLiftGraph'
          }, {
            name: 'targetFieldValue',
            attributeName: {
              localPart: 'targetFieldValue'
            },
            type: 'attribute'
          }, {
            name: 'targetFieldDisplayValue',
            attributeName: {
              localPart: 'targetFieldDisplayValue'
            },
            type: 'attribute'
          }, {
            name: 'rankingQuality',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'rankingQuality'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'RadialBasisKernel',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'description',
            attributeName: {
              localPart: 'description'
            },
            type: 'attribute'
          }, {
            name: 'gamma',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'gamma'
            },
            type: 'attribute'
          }, {
            name: 'noiseVariance',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'noiseVariance'
            },
            type: 'attribute'
          }, {
            name: 'lambda',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'lambda'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'ParameterField',
        typeName: null,
        propertyInfos: [{
            name: 'name',
            required: true,
            attributeName: {
              localPart: 'name'
            },
            type: 'attribute'
          }, {
            name: 'optype',
            attributeName: {
              localPart: 'optype'
            },
            type: 'attribute'
          }, {
            name: 'dataType',
            attributeName: {
              localPart: 'dataType'
            },
            type: 'attribute'
          }, {
            name: 'displayName',
            attributeName: {
              localPart: 'displayName'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'Characteristics',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'characteristic',
            required: true,
            collection: true,
            elementName: 'Characteristic',
            typeInfo: '.Characteristic'
          }]
      }, {
        localName: 'DefineFunction',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'parameterField',
            required: true,
            collection: true,
            elementName: 'ParameterField',
            typeInfo: '.ParameterField'
          }, {
            name: 'constant',
            required: true,
            elementName: 'Constant',
            typeInfo: '.Constant'
          }, {
            name: 'fieldRef',
            required: true,
            elementName: 'FieldRef',
            typeInfo: '.FieldRef'
          }, {
            name: 'normContinuous',
            required: true,
            elementName: 'NormContinuous',
            typeInfo: '.NormContinuous'
          }, {
            name: 'normDiscrete',
            required: true,
            elementName: 'NormDiscrete',
            typeInfo: '.NormDiscrete'
          }, {
            name: 'discretize',
            required: true,
            elementName: 'Discretize',
            typeInfo: '.Discretize'
          }, {
            name: 'mapValues',
            required: true,
            elementName: 'MapValues',
            typeInfo: '.MapValues'
          }, {
            name: 'textIndex',
            required: true,
            elementName: 'TextIndex',
            typeInfo: '.TextIndex'
          }, {
            name: 'apply',
            required: true,
            elementName: 'Apply',
            typeInfo: '.Apply'
          }, {
            name: 'aggregate',
            required: true,
            elementName: 'Aggregate',
            typeInfo: '.Aggregate'
          }, {
            name: 'lag',
            required: true,
            elementName: 'Lag',
            typeInfo: '.Lag'
          }, {
            name: 'name',
            required: true,
            attributeName: {
              localPart: 'name'
            },
            type: 'attribute'
          }, {
            name: 'optype',
            required: true,
            attributeName: {
              localPart: 'optype'
            },
            type: 'attribute'
          }, {
            name: 'dataType',
            attributeName: {
              localPart: 'dataType'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'Segmentation',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'segment',
            required: true,
            collection: true,
            elementName: 'Segment',
            typeInfo: '.Segment'
          }, {
            name: 'multipleModelMethod',
            required: true,
            attributeName: {
              localPart: 'multipleModelMethod'
            },
            type: 'attribute'
          }, {
            name: 'missingPredictionTreatment',
            attributeName: {
              localPart: 'missingPredictionTreatment'
            },
            type: 'attribute'
          }, {
            name: 'missingThreshold',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'missingThreshold'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'SimpleMatching',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }]
      }, {
        localName: 'Item',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'id',
            required: true,
            attributeName: {
              localPart: 'id'
            },
            type: 'attribute'
          }, {
            name: 'value',
            required: true,
            attributeName: {
              localPart: 'value'
            },
            type: 'attribute'
          }, {
            name: 'field',
            attributeName: {
              localPart: 'field'
            },
            type: 'attribute'
          }, {
            name: 'category',
            attributeName: {
              localPart: 'category'
            },
            type: 'attribute'
          }, {
            name: 'mappedValue',
            attributeName: {
              localPart: 'mappedValue'
            },
            type: 'attribute'
          }, {
            name: 'weight',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'weight'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'SetPredicate',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'array',
            required: true,
            elementName: 'Array',
            typeInfo: '.ArrayType'
          }, {
            name: 'id',
            required: true,
            attributeName: {
              localPart: 'id'
            },
            type: 'attribute'
          }, {
            name: 'field',
            required: true,
            attributeName: {
              localPart: 'field'
            },
            type: 'attribute'
          }, {
            name: 'operator',
            attributeName: {
              localPart: 'operator'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'Decision',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'value',
            required: true,
            attributeName: {
              localPart: 'value'
            },
            type: 'attribute'
          }, {
            name: 'displayValue',
            attributeName: {
              localPart: 'displayValue'
            },
            type: 'attribute'
          }, {
            name: 'description',
            attributeName: {
              localPart: 'description'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'AnovaRow',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'type',
            required: true,
            attributeName: {
              localPart: 'type'
            },
            type: 'attribute'
          }, {
            name: 'sumOfSquares',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'sumOfSquares'
            },
            type: 'attribute'
          }, {
            name: 'degreesOfFreedom',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'degreesOfFreedom'
            },
            type: 'attribute'
          }, {
            name: 'meanOfSquares',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'meanOfSquares'
            },
            type: 'attribute'
          }, {
            name: 'fValue',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'fValue'
            },
            type: 'attribute'
          }, {
            name: 'pValue',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'pValue'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'EventValues',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'value',
            minOccurs: 0,
            collection: true,
            elementName: 'Value',
            typeInfo: '.Value'
          }, {
            name: 'interval',
            minOccurs: 0,
            collection: true,
            elementName: 'Interval',
            typeInfo: '.Interval'
          }]
      }, {
        localName: 'Category',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'value',
            required: true,
            attributeName: {
              localPart: 'value'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'FinalPredictedNoise',
        typeName: null,
        propertyInfos: [{
            name: 'array',
            required: true,
            elementName: 'Array',
            typeInfo: '.ArrayType'
          }]
      }, {
        localName: 'ARIMA',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'nonseasonalComponent',
            elementName: 'NonseasonalComponent',
            typeInfo: '.NonseasonalComponent'
          }, {
            name: 'seasonalComponent',
            elementName: 'SeasonalComponent',
            typeInfo: '.SeasonalComponent'
          }, {
            name: 'dynamicRegressor',
            minOccurs: 0,
            collection: true,
            elementName: 'DynamicRegressor',
            typeInfo: '.DynamicRegressor'
          }, {
            name: 'maximumLikelihoodStat',
            elementName: 'MaximumLikelihoodStat',
            typeInfo: '.MaximumLikelihoodStat'
          }, {
            name: 'outlierEffect',
            minOccurs: 0,
            collection: true,
            elementName: 'OutlierEffect',
            typeInfo: '.OutlierEffect'
          }, {
            name: 'rmse',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'RMSE'
            },
            type: 'attribute'
          }, {
            name: 'transformation',
            attributeName: {
              localPart: 'transformation'
            },
            type: 'attribute'
          }, {
            name: 'constantTerm',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'constantTerm'
            },
            type: 'attribute'
          }, {
            name: 'predictionMethod',
            attributeName: {
              localPart: 'predictionMethod'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'TextIndex',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'textIndexNormalization',
            minOccurs: 0,
            collection: true,
            elementName: 'TextIndexNormalization',
            typeInfo: '.TextIndexNormalization'
          }, {
            name: 'constant',
            required: true,
            elementName: 'Constant',
            typeInfo: '.Constant'
          }, {
            name: 'fieldRef',
            required: true,
            elementName: 'FieldRef',
            typeInfo: '.FieldRef'
          }, {
            name: 'normContinuous',
            required: true,
            elementName: 'NormContinuous',
            typeInfo: '.NormContinuous'
          }, {
            name: 'normDiscrete',
            required: true,
            elementName: 'NormDiscrete',
            typeInfo: '.NormDiscrete'
          }, {
            name: 'discretize',
            required: true,
            elementName: 'Discretize',
            typeInfo: '.Discretize'
          }, {
            name: 'mapValues',
            required: true,
            elementName: 'MapValues',
            typeInfo: '.MapValues'
          }, {
            name: 'textIndex',
            required: true,
            elementName: 'TextIndex',
            typeInfo: '.TextIndex'
          }, {
            name: 'apply',
            required: true,
            elementName: 'Apply',
            typeInfo: '.Apply'
          }, {
            name: 'aggregate',
            required: true,
            elementName: 'Aggregate',
            typeInfo: '.Aggregate'
          }, {
            name: 'lag',
            required: true,
            elementName: 'Lag',
            typeInfo: '.Lag'
          }, {
            name: 'textField',
            required: true,
            attributeName: {
              localPart: 'textField'
            },
            type: 'attribute'
          }, {
            name: 'localTermWeights',
            attributeName: {
              localPart: 'localTermWeights'
            },
            type: 'attribute'
          }, {
            name: 'isCaseSensitive',
            typeInfo: 'Boolean',
            attributeName: {
              localPart: 'isCaseSensitive'
            },
            type: 'attribute'
          }, {
            name: 'maxLevenshteinDistance',
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'maxLevenshteinDistance'
            },
            type: 'attribute'
          }, {
            name: 'countHits',
            attributeName: {
              localPart: 'countHits'
            },
            type: 'attribute'
          }, {
            name: 'wordSeparatorCharacterRE',
            attributeName: {
              localPart: 'wordSeparatorCharacterRE'
            },
            type: 'attribute'
          }, {
            name: 'tokenize',
            typeInfo: 'Boolean',
            attributeName: {
              localPart: 'tokenize'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'OptimumLiftGraph',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'liftGraph',
            required: true,
            elementName: 'LiftGraph',
            typeInfo: '.LiftGraph'
          }]
      }, {
        localName: 'Taxonomy',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'childParent',
            required: true,
            collection: true,
            elementName: 'ChildParent',
            typeInfo: '.ChildParent'
          }, {
            name: 'name',
            required: true,
            attributeName: {
              localPart: 'name'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'Itemset',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'itemRef',
            minOccurs: 0,
            collection: true,
            elementName: 'ItemRef',
            typeInfo: '.ItemRef'
          }, {
            name: 'id',
            required: true,
            attributeName: {
              localPart: 'id'
            },
            type: 'attribute'
          }, {
            name: 'support',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'support'
            },
            type: 'attribute'
          }, {
            name: 'numberOfItems',
            typeInfo: 'NonNegativeInteger',
            attributeName: {
              localPart: 'numberOfItems'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'NormalDistributionForBN',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'mean',
            required: true,
            elementName: 'Mean',
            typeInfo: '.Mean'
          }, {
            name: 'variance',
            required: true,
            elementName: 'Variance',
            typeInfo: '.Variance'
          }]
      }, {
        localName: 'LocalTransformations',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'derivedField',
            minOccurs: 0,
            collection: true,
            elementName: 'DerivedField',
            typeInfo: '.DerivedField'
          }]
      }, {
        localName: 'CategoricalPredictor',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'name',
            required: true,
            attributeName: {
              localPart: 'name'
            },
            type: 'attribute'
          }, {
            name: 'value',
            required: true,
            attributeName: {
              localPart: 'value'
            },
            type: 'attribute'
          }, {
            name: 'coefficient',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'coefficient'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'Euclidean',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }]
      }, {
        localName: 'BaselineModel',
        typeName: null,
        propertyInfos: [{
            name: 'content',
            required: true,
            minOccurs: 2,
            collection: true,
            mixed: false,
            allowDom: false,
            elementTypeInfos: [{
                elementName: 'ModelExplanation',
                typeInfo: '.ModelExplanation'
              }, {
                elementName: 'ModelVerification',
                typeInfo: '.ModelVerification'
              }, {
                elementName: 'TestDistributions',
                typeInfo: '.TestDistributions'
              }, {
                elementName: 'LocalTransformations',
                typeInfo: '.LocalTransformations'
              }, {
                elementName: 'Extension',
                typeInfo: '.Extension'
              }, {
                elementName: 'ModelStats',
                typeInfo: '.ModelStats'
              }, {
                elementName: 'Output',
                typeInfo: '.Output'
              }, {
                elementName: 'Targets',
                typeInfo: '.Targets'
              }, {
                elementName: 'MiningSchema',
                typeInfo: '.MiningSchema'
              }],
            type: 'elementRefs'
          }, {
            name: 'modelName',
            attributeName: {
              localPart: 'modelName'
            },
            type: 'attribute'
          }, {
            name: 'functionName',
            required: true,
            attributeName: {
              localPart: 'functionName'
            },
            type: 'attribute'
          }, {
            name: 'algorithmName',
            attributeName: {
              localPart: 'algorithmName'
            },
            type: 'attribute'
          }, {
            name: 'isScorable',
            typeInfo: 'Boolean',
            attributeName: {
              localPart: 'isScorable'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'TestDistributions',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'baseline',
            required: true,
            elementName: 'Baseline',
            typeInfo: '.Baseline'
          }, {
            name: 'alternate',
            elementName: 'Alternate',
            typeInfo: '.Alternate'
          }, {
            name: 'field',
            required: true,
            attributeName: {
              localPart: 'field'
            },
            type: 'attribute'
          }, {
            name: 'testStatistic',
            required: true,
            attributeName: {
              localPart: 'testStatistic'
            },
            type: 'attribute'
          }, {
            name: 'resetValue',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'resetValue'
            },
            type: 'attribute'
          }, {
            name: 'windowSize',
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'windowSize'
            },
            type: 'attribute'
          }, {
            name: 'weightField',
            attributeName: {
              localPart: 'weightField'
            },
            type: 'attribute'
          }, {
            name: 'normalizationScheme',
            attributeName: {
              localPart: 'normalizationScheme'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'ThetaRecursionState',
        typeName: null,
        propertyInfos: [{
            name: 'finalNoise',
            required: true,
            elementName: 'FinalNoise',
            typeInfo: '.FinalNoise'
          }, {
            name: 'finalPredictedNoise',
            required: true,
            elementName: 'FinalPredictedNoise',
            typeInfo: '.FinalPredictedNoise'
          }, {
            name: 'finalTheta',
            required: true,
            elementName: 'FinalTheta',
            typeInfo: '.FinalTheta'
          }, {
            name: 'finalNu',
            required: true,
            elementName: 'FinalNu',
            typeInfo: '.FinalNu'
          }]
      }, {
        localName: 'FieldValue',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'fieldValue',
            required: true,
            collection: true,
            elementName: 'FieldValue',
            typeInfo: '.FieldValue'
          }, {
            name: 'fieldValueCount',
            required: true,
            collection: true,
            elementName: 'FieldValueCount',
            typeInfo: '.FieldValueCount'
          }, {
            name: 'field',
            required: true,
            attributeName: {
              localPart: 'field'
            },
            type: 'attribute'
          }, {
            name: 'value',
            required: true,
            attributeName: {
              localPart: 'value'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'TargetValueCount',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'value',
            required: true,
            attributeName: {
              localPart: 'value'
            },
            type: 'attribute'
          }, {
            name: 'count',
            required: true,
            typeInfo: 'Double',
            attributeName: {
              localPart: 'count'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'GARCHPart',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'residualSquareCoefficients',
            required: true,
            elementName: 'ResidualSquareCoefficients',
            typeInfo: '.ResidualSquareCoefficients'
          }, {
            name: 'varianceCoefficients',
            required: true,
            elementName: 'VarianceCoefficients',
            typeInfo: '.VarianceCoefficients'
          }, {
            name: 'constant',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'constant'
            },
            type: 'attribute'
          }, {
            name: 'gp',
            required: true,
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'gp'
            },
            type: 'attribute'
          }, {
            name: 'gq',
            required: true,
            typeInfo: 'Integer',
            attributeName: {
              localPart: 'gq'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'Row',
        typeName: null,
        propertyInfos: [{
            name: 'content',
            collection: true,
            allowTypedObject: false,
            type: 'anyElement'
          }]
      }, {
        localName: 'Attribute',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'simplePredicate',
            required: true,
            elementName: 'SimplePredicate',
            typeInfo: '.SimplePredicate'
          }, {
            name: 'compoundPredicate',
            required: true,
            elementName: 'CompoundPredicate',
            typeInfo: '.CompoundPredicate'
          }, {
            name: 'simpleSetPredicate',
            required: true,
            elementName: 'SimpleSetPredicate',
            typeInfo: '.SimpleSetPredicate'
          }, {
            name: '_true',
            required: true,
            elementName: 'True',
            typeInfo: '.True'
          }, {
            name: '_false',
            required: true,
            elementName: 'False',
            typeInfo: '.False'
          }, {
            name: 'complexPartialScore',
            elementName: 'ComplexPartialScore',
            typeInfo: '.ComplexPartialScore'
          }, {
            name: 'reasonCode',
            attributeName: {
              localPart: 'reasonCode'
            },
            type: 'attribute'
          }, {
            name: 'partialScore',
            typeInfo: 'Double',
            attributeName: {
              localPart: 'partialScore'
            },
            type: 'attribute'
          }]
      }, {
        localName: 'Correlations',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'correlationFields',
            required: true,
            elementName: 'CorrelationFields',
            typeInfo: '.CorrelationFields'
          }, {
            name: 'correlationValues',
            required: true,
            elementName: 'CorrelationValues',
            typeInfo: '.CorrelationValues'
          }, {
            name: 'correlationMethods',
            elementName: 'CorrelationMethods',
            typeInfo: '.CorrelationMethods'
          }]
      }, {
        localName: 'TargetValueStats',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'targetValueStat',
            required: true,
            collection: true,
            elementName: 'TargetValueStat',
            typeInfo: '.TargetValueStat'
          }]
      }, {
        localName: 'YCoordinates',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'array',
            required: true,
            elementName: 'Array',
            typeInfo: '.ArrayType'
          }]
      }, {
        localName: 'TargetValueStat',
        typeName: null,
        propertyInfos: [{
            name: 'extension',
            minOccurs: 0,
            collection: true,
            elementName: 'Extension',
            typeInfo: '.Extension'
          }, {
            name: 'anyDistribution',
            required: true,
            elementName: 'AnyDistribution',
            typeInfo: '.AnyDistribution'
          }, {
            name: 'gaussianDistribution',
            required: true,
            elementName: 'GaussianDistribution',
            typeInfo: '.GaussianDistribution'
          }, {
            name: 'poissonDistribution',
            required: true,
            elementName: 'PoissonDistribution',
            typeInfo: '.PoissonDistribution'
          }, {
            name: 'uniformDistribution',
            required: true,
            elementName: 'UniformDistribution',
            typeInfo: '.UniformDistribution'
          }, {
            name: 'value',
            required: true,
            attributeName: {
              localPart: 'value'
            },
            type: 'attribute'
          }]
      }, {
        type: 'enumInfo',
        localName: 'TIMEEXCEPTIONTYPE',
        values: ['exclude', 'include']
      }, {
        type: 'enumInfo',
        localName: 'NNNORMALIZATIONMETHOD',
        values: ['none', 'simplemax', 'softmax']
      }, {
        type: 'enumInfo',
        localName: 'RESULTFEATURE',
        values: ['predictedValue', 'predictedDisplayValue', 'transformedValue', 'decision', 'probability', 'affinity', 'residual', 'standardError', 'standardDeviation', 'clusterId', 'clusterAffinity', 'entityId', 'entityAffinity', 'warning', 'ruleValue', 'reasonCode', 'antecedent', 'consequent', 'rule', 'ruleId', 'confidence', 'support', 'lift', 'leverage']
      }, {
        type: 'enumInfo',
        localName: 'CUMULATIVELINKFUNCTION',
        values: ['logit', 'probit', 'cloglog', 'loglog', 'cauchit']
      }, {
        type: 'enumInfo',
        localName: 'MISSINGVALUETREATMENTMETHOD',
        values: ['asIs', 'asMean', 'asMode', 'asMedian', 'asValue', 'returnInvalid']
      }, {
        type: 'enumInfo',
        localName: 'VALIDTIMESPEC',
        values: ['includeAll', 'includeFromTo', 'excludeFromTo', 'includeSet', 'excludeSet']
      }, {
        type: 'enumInfo',
        localName: 'TIMESERIESALGORITHM',
        values: ['ARIMA', 'ExponentialSmoothing', 'SeasonalTrendDecomposition', 'SpectralAnalysis', 'StateSpaceModel', 'GARCH']
      }, {
        type: 'enumInfo',
        localName: 'OUTLIERTREATMENTMETHOD',
        values: ['asIs', 'asMissingValues', 'asExtremeValues']
      }, {
        type: 'enumInfo',
        localName: 'SVMREPRESENTATION',
        values: ['SupportVectors', 'Coefficients']
      }, {
        type: 'enumInfo',
        localName: 'MISSINGPREDICTIONTREATMENT',
        values: ['returnMissing', 'skipSegment', 'continue']
      }, {
        type: 'enumInfo',
        localName: 'NOTRUECHILDSTRATEGY',
        values: ['returnNullPrediction', 'returnLastPrediction']
      }, {
        type: 'enumInfo',
        localName: 'BNTYPE',
        values: ['General', 'TAN', 'Markov-blanket']
      }, {
        type: 'enumInfo',
        localName: 'RULEFEATURE',
        values: ['antecedent', 'consequent', 'rule', 'ruleId', 'confidence', 'support', 'lift', 'leverage', 'affinity']
      }, {
        type: 'enumInfo',
        localName: 'DELIMITER',
        values: ['sameTimeWindow', 'acrossTimeWindows']
      }, {
        type: 'enumInfo',
        localName: 'INVALIDVALUETREATMENTMETHOD',
        values: ['returnInvalid', 'asIs', 'asMissing', 'asValue']
      }, {
        type: 'enumInfo',
        localName: 'LINKFUNCTION',
        values: ['cloglog', 'identity', 'log', 'logc', 'logit', 'loglog', 'negbin', 'oddspower', 'power', 'probit']
      }, {
        type: 'enumInfo',
        localName: 'FIELDUSAGETYPE',
        values: ['active', 'predicted', 'target', 'supplementary', 'group', 'order', 'frequencyWeight', 'analysisWeight']
      }, {
        type: 'enumInfo',
        localName: 'BASELINETESTSTATISTIC',
        values: ['zValue', 'chiSquareIndependence', 'chiSquareDistribution', 'CUSUM', 'scalarProduct']
      }, {
        type: 'enumInfo',
        localName: 'COMPAREFUNCTION',
        values: ['absDiff', 'gaussSim', 'delta', 'equal', 'table']
      }, {
        type: 'enumInfo',
        localName: 'TIMESERIESUSAGE',
        values: ['original', 'logical', 'prediction']
      }, {
        type: 'enumInfo',
        localName: 'CONTSCORINGMETHOD',
        values: ['median', 'average', 'weightedAverage']
      }, {
        type: 'enumInfo',
        localName: 'INFERENCETYPE',
        values: ['Other', 'MCMC', 'Exact']
      }, {
        type: 'enumInfo',
        localName: 'MULTIPLEMODELMETHOD',
        values: ['majorityVote', 'weightedMajorityVote', 'average', 'weightedAverage', 'median', 'weightedMedian', 'max', 'sum', 'weightedSum', 'selectFirst', 'selectAll', 'modelChain']
      }, {
        type: 'enumInfo',
        localName: 'SVMCLASSIFICATIONMETHOD',
        values: ['OneAgainstAll', 'OneAgainstOne']
      }, {
        type: 'enumInfo',
        localName: 'CATSCORINGMETHOD',
        values: ['majorityVote', 'weightedMajorityVote']
      }, {
        type: 'enumInfo',
        localName: 'OPTYPE',
        values: ['categorical', 'ordinal', 'continuous']
      }, {
        type: 'enumInfo',
        localName: 'MININGFUNCTION',
        values: ['associationRules', 'sequences', 'classification', 'regression', 'clustering', 'timeSeries', 'mixed']
      }, {
        type: 'enumInfo',
        localName: 'DATATYPE',
        values: ['string', 'integer', 'float', 'double', 'boolean', 'date', 'time', 'dateTime', 'dateDaysSince[0]', 'dateDaysSince[1960]', 'dateDaysSince[1970]', 'dateDaysSince[1980]', 'timeSeconds', 'dateTimeSecondsSince[0]', 'dateTimeSecondsSince[1960]', 'dateTimeSecondsSince[1970]', 'dateTimeSecondsSince[1980]']
      }, {
        type: 'enumInfo',
        localName: 'TIMEANCHOR',
        values: ['dateTimeMillisecondsSince[0]', 'dateTimeMillisecondsSince[1960]', 'dateTimeMillisecondsSince[1970]', 'dateTimeMillisecondsSince[1980]', 'dateTimeSecondsSince[0]', 'dateTimeSecondsSince[1960]', 'dateTimeSecondsSince[1970]', 'dateTimeSecondsSince[1980]', 'dateDaysSince[0]', 'dateDaysSince[1960]', 'dateDaysSince[1970]', 'dateDaysSince[1980]', 'dateMonthsSince[0]', 'dateMonthsSince[1960]', 'dateMonthsSince[1970]', 'dateMonthsSince[1980]', 'dateYearsSince[0]']
      }, {
        type: 'enumInfo',
        localName: 'MISSINGVALUESTRATEGY',
        values: ['lastPrediction', 'nullPrediction', 'defaultChild', 'weightedConfidence', 'aggregateNodes', 'none']
      }, {
        type: 'enumInfo',
        localName: 'GAP',
        values: ['true', 'false', 'unknown']
      }, {
        type: 'enumInfo',
        localName: 'REGRESSIONNORMALIZATIONMETHOD',
        values: ['none', 'simplemax', 'softmax', 'logit', 'probit', 'cloglog', 'exp', 'loglog', 'cauchit']
      }, {
        type: 'enumInfo',
        localName: 'ACTIVATIONFUNCTION',
        values: ['threshold', 'logistic', 'tanh', 'identity', 'exponential', 'reciprocal', 'square', 'Gauss', 'sine', 'cosine', 'Elliott', 'arctan', 'rectifier', 'radialBasis']
      }, {
        type: 'enumInfo',
        localName: 'ALGORITHMTYPE',
        values: ['iforest', 'ocsvm', 'clusterMeanDist', 'other']
      }, {
        type: 'enumInfo',
        localName: 'INTERPOLATIONMETHOD',
        values: ['none', 'linear', 'exponentialSpline', 'cubicSpline']
      }],
    elementInfos: [{
        elementName: 'CorrelationMethods',
        typeInfo: '.CorrelationMethods'
      }, {
        elementName: 'PairCounts',
        typeInfo: '.PairCounts'
      }, {
        elementName: 'PoissonDistribution',
        typeInfo: '.PoissonDistribution'
      }, {
        elementName: 'REAL-Entries',
        typeInfo: {
          type: 'list',
          baseTypeInfo: 'Double'
        }
      }, {
        elementName: 'TreeModel',
        typeInfo: '.TreeModel'
      }, {
        elementName: 'FinalNoise',
        typeInfo: '.FinalNoise'
      }, {
        elementName: 'Matrix',
        typeInfo: '.Matrix'
      }, {
        elementName: 'GARCH',
        typeInfo: '.GARCH'
      }, {
        elementName: 'PsiVector',
        typeInfo: '.PsiVector'
      }, {
        elementName: 'MiningSchema',
        typeInfo: '.MiningSchema'
      }, {
        elementName: 'SequenceModel',
        typeInfo: '.SequenceModel'
      }, {
        elementName: 'FieldRef',
        typeInfo: '.FieldRef'
      }, {
        elementName: 'VerificationFields',
        typeInfo: '.VerificationFields'
      }, {
        elementName: 'TargetValueCount',
        typeInfo: '.TargetValueCount'
      }, {
        elementName: 'SupportVectors',
        typeInfo: '.SupportVectors'
      }, {
        elementName: 'TextIndexNormalization',
        typeInfo: '.TextIndexNormalization'
      }, {
        elementName: 'MiningField',
        typeInfo: '.MiningField'
      }, {
        elementName: 'CorrelationFields',
        typeInfo: '.CorrelationFields'
      }, {
        elementName: 'BayesInputs',
        typeInfo: '.BayesInputs'
      }, {
        elementName: 'HVector',
        typeInfo: '.HVector'
      }, {
        elementName: 'GaussianDistribution',
        typeInfo: '.GaussianDistribution'
      }, {
        elementName: 'NeuralNetwork',
        typeInfo: '.NeuralNetwork'
      }, {
        elementName: 'Constant',
        typeInfo: '.Constant'
      }, {
        elementName: 'Array',
        typeInfo: '.ArrayType'
      }, {
        elementName: 'Neuron',
        typeInfo: '.Neuron'
      }, {
        elementName: 'ARIMA',
        typeInfo: '.ARIMA'
      }, {
        elementName: 'VectorInstance',
        typeInfo: '.VectorInstance'
      }, {
        elementName: 'TransformationDictionary',
        typeInfo: '.TransformationDictionary'
      }, {
        elementName: 'Segmentation',
        typeInfo: '.Segmentation'
      }, {
        elementName: 'ROC',
        typeInfo: '.ROC'
      }, {
        elementName: 'CompoundRule',
        typeInfo: '.CompoundRule'
      }, {
        elementName: 'PredictiveModelQuality',
        typeInfo: '.PredictiveModelQuality'
      }, {
        elementName: 'RegressionTable',
        typeInfo: '.RegressionTable'
      }, {
        elementName: 'BayesianNetworkNodes',
        typeInfo: '.BayesianNetworkNodes'
      }, {
        elementName: 'TargetValueCounts',
        typeInfo: '.TargetValueCounts'
      }, {
        elementName: 'Con',
        typeInfo: '.Con'
      }, {
        elementName: 'LocalTransformations',
        typeInfo: '.LocalTransformations'
      }, {
        elementName: 'StateVector',
        typeInfo: '.StateVector'
      }, {
        elementName: 'ParameterList',
        typeInfo: '.ParameterList'
      }, {
        elementName: 'SupportVector',
        typeInfo: '.SupportVector'
      }, {
        elementName: 'ModelLiftGraph',
        typeInfo: '.ModelLiftGraph'
      }, {
        elementName: 'ComparisonMeasure',
        typeInfo: '.ComparisonMeasure'
      }, {
        elementName: 'euclidean',
        typeInfo: '.Euclidean'
      }, {
        elementName: 'RuleSet',
        typeInfo: '.RuleSet'
      }, {
        elementName: 'Theta',
        typeInfo: '.Theta'
      }, {
        elementName: 'Target',
        typeInfo: '.Target'
      }, {
        elementName: 'NeuralLayer',
        typeInfo: '.NeuralLayer'
      }, {
        elementName: 'Discretize',
        typeInfo: '.Discretize'
      }, {
        elementName: 'SigmoidKernelType',
        typeInfo: '.SigmoidKernelType'
      }, {
        elementName: 'NormalizedCountTable',
        typeInfo: '.COUNTTABLETYPE'
      }, {
        elementName: 'Covariances',
        typeInfo: '.Covariances'
      }, {
        elementName: 'Residuals',
        typeInfo: '.Residuals'
      }, {
        elementName: 'Baseline',
        typeInfo: '.Baseline'
      }, {
        elementName: 'LinearNorm',
        typeInfo: '.LinearNorm'
      }, {
        elementName: 'BayesianNetworkModel',
        typeInfo: '.BayesianNetworkModel'
      }, {
        elementName: 'VectorFields',
        typeInfo: '.VectorFields'
      }, {
        elementName: 'Numerator',
        typeInfo: '.Numerator'
      }, {
        elementName: 'Variance',
        typeInfo: '.Variance'
      }, {
        elementName: 'BayesInput',
        typeInfo: '.BayesInput'
      }, {
        elementName: 'RandomLiftGraph',
        typeInfo: '.RandomLiftGraph'
      }, {
        elementName: 'Regression',
        typeInfo: '.Regression'
      }, {
        elementName: 'SequenceRule',
        typeInfo: '.SequenceRule'
      }, {
        elementName: 'FinalOmega',
        typeInfo: '.FinalOmega'
      }, {
        elementName: 'FinalNu',
        typeInfo: '.FinalNu'
      }, {
        elementName: 'NormContinuous',
        typeInfo: '.NormContinuous'
      }, {
        elementName: 'TimeValue',
        typeInfo: '.TimeValue'
      }, {
        elementName: 'Value',
        typeInfo: '.Value'
      }, {
        elementName: 'BaseCumHazardTables',
        typeInfo: '.BaseCumHazardTables'
      }, {
        elementName: 'PredictorTerm',
        typeInfo: '.PredictorTerm'
      }, {
        elementName: 'TextDictionary',
        typeInfo: '.TextDictionary'
      }, {
        elementName: 'Extension',
        typeInfo: '.Extension'
      }, {
        elementName: 'simpleMatching',
        typeInfo: '.SimpleMatching'
      }, {
        elementName: 'KohonenMap',
        typeInfo: '.KohonenMap'
      }, {
        elementName: 'MiningBuildTask',
        typeInfo: '.MiningBuildTask'
      }, {
        elementName: 'Output',
        typeInfo: '.Output'
      }, {
        elementName: 'Trend_ExpoSmooth',
        typeInfo: '.TrendExpoSmooth'
      }, {
        elementName: 'Category',
        typeInfo: '.Category'
      }, {
        elementName: 'DiscreteConditionalProbability',
        typeInfo: '.DiscreteConditionalProbability'
      }, {
        elementName: 'Timestamp',
        typeInfo: '.Timestamp'
      }, {
        elementName: 'INT-Entries',
        typeInfo: {
          type: 'list',
          baseTypeInfo: 'Int'
        }
      }, {
        elementName: 'TargetValueStat',
        typeInfo: '.TargetValueStat'
      }, {
        elementName: 'Denominator',
        typeInfo: '.Denominator'
      }, {
        elementName: 'Scorecard',
        typeInfo: '.Scorecard'
      }, {
        elementName: 'AnovaRow',
        typeInfo: '.AnovaRow'
      }, {
        elementName: 'TriangularDistributionForBN',
        typeInfo: '.TriangularDistributionForBN'
      }, {
        elementName: 'AnomalyDetectionModel',
        typeInfo: '.AnomalyDetectionModel'
      }, {
        elementName: 'Partition',
        typeInfo: '.Partition'
      }, {
        elementName: 'DataField',
        typeInfo: '.DataField'
      }, {
        elementName: 'Counts',
        typeInfo: '.Counts'
      }, {
        elementName: 'FactorList',
        typeInfo: '.FactorList'
      }, {
        elementName: 'SimpleSetPredicate',
        typeInfo: '.SimpleSetPredicate'
      }, {
        elementName: 'BayesOutput',
        typeInfo: '.BayesOutput'
      }, {
        elementName: 'Apply',
        typeInfo: '.Apply'
      }, {
        elementName: 'DefineFunction',
        typeInfo: '.DefineFunction'
      }, {
        elementName: 'Lower',
        typeInfo: '.Lower'
      }, {
        elementName: 'RuleSetModel',
        typeInfo: '.RuleSetModel'
      }, {
        elementName: 'SpectralAnalysis',
        typeInfo: 'AnyType'
      }, {
        elementName: 'LiftGraph',
        typeInfo: '.LiftGraph'
      }, {
        elementName: 'Segment',
        typeInfo: '.Segment'
      }, {
        elementName: 'PolynomialKernelType',
        typeInfo: '.PolynomialKernelType'
      }, {
        elementName: 'MeanClusterDistances',
        typeInfo: '.MeanClusterDistances'
      }, {
        elementName: 'PMML',
        typeInfo: '.PMML'
      }, {
        elementName: 'ContinuousDistribution',
        typeInfo: '.ContinuousDistribution'
      }, {
        elementName: 'Time',
        typeInfo: '.Time'
      }, {
        elementName: 'DiscretizeBin',
        typeInfo: '.DiscretizeBin'
      }, {
        elementName: 'GaussianProcessModel',
        typeInfo: '.GaussianProcessModel'
      }, {
        elementName: 'RadialBasisKernelType',
        typeInfo: '.RadialBasisKernelType'
      }, {
        elementName: 'BaselineCell',
        typeInfo: '.BaselineCell'
      }, {
        elementName: 'YCoordinates',
        typeInfo: '.YCoordinates'
      }, {
        elementName: 'VectorDictionary',
        typeInfo: '.VectorDictionary'
      }, {
        elementName: 'KNNInput',
        typeInfo: '.KNNInput'
      }, {
        elementName: 'ComplexPartialScore',
        typeInfo: '.ComplexPartialScore'
      }, {
        elementName: 'LognormalDistributionForBN',
        typeInfo: '.LognormalDistributionForBN'
      }, {
        elementName: 'TextDocument',
        typeInfo: '.TextDocument'
      }, {
        elementName: 'ScoreDistribution',
        typeInfo: '.ScoreDistribution'
      }, {
        elementName: 'FinalStateVector',
        typeInfo: '.FinalStateVector'
      }, {
        elementName: 'Cluster',
        typeInfo: '.Cluster'
      }, {
        elementName: 'Constraints',
        typeInfo: '.Constraints'
      }, {
        elementName: 'RegressorValues',
        typeInfo: '.RegressorValues'
      }, {
        elementName: 'PastVariances',
        typeInfo: '.PastVariances'
      }, {
        elementName: 'ContinuousConditionalProbability',
        typeInfo: '.ContinuousConditionalProbability'
      }, {
        elementName: 'TextIndex',
        typeInfo: '.TextIndex'
      }, {
        elementName: 'Coefficients',
        typeInfo: '.Coefficients'
      }, {
        elementName: 'Alternate',
        typeInfo: '.Alternate'
      }, {
        elementName: 'LinearKernelType',
        typeInfo: '.LinearKernelType'
      }, {
        elementName: 'ConsequentSequence',
        typeInfo: '.ConsequentSequence'
      }, {
        elementName: 'VariableWeight',
        typeInfo: '.VariableWeight'
      }, {
        elementName: 'AR',
        typeInfo: '.AR'
      }, {
        elementName: 'InstanceField',
        typeInfo: '.InstanceField'
      }, {
        elementName: 'NaiveBayesModel',
        typeInfo: '.NaiveBayesModel'
      }, {
        elementName: 'CompoundPredicate',
        typeInfo: '.CompoundPredicate'
      }, {
        elementName: 'UniformDistributionForBN',
        typeInfo: '.UniformDistributionForBN'
      }, {
        elementName: 'InlineTable',
        typeInfo: '.InlineTable'
      }, {
        elementName: 'SupportVectorMachineModel',
        typeInfo: '.SupportVectorMachineModel'
      }, {
        elementName: 'TimeException',
        typeInfo: '.TimeException'
      }, {
        elementName: 'Interval',
        typeInfo: '.Interval'
      }, {
        elementName: 'PPMatrix',
        typeInfo: '.PPMatrix'
      }, {
        elementName: 'ModelVerification',
        typeInfo: '.ModelVerification'
      }, {
        elementName: 'Annotation',
        typeInfo: '.Annotation'
      }, {
        elementName: 'NonseasonalFactor',
        typeInfo: '.NonseasonalFactor'
      }, {
        elementName: 'ThetaRecursionState',
        typeInfo: '.ThetaRecursionState'
      }, {
        elementName: 'CategoricalPredictor',
        typeInfo: '.CategoricalPredictor'
      }, {
        elementName: 'AntecedentSequence',
        typeInfo: '.AntecedentSequence'
      }, {
        elementName: 'TrendCoefficients',
        typeInfo: '.TrendCoefficients'
      }, {
        elementName: 'SupportVectorMachine',
        typeInfo: '.SupportVectorMachine'
      }, {
        elementName: 'FieldValue',
        typeInfo: '.FieldValue'
      }, {
        elementName: 'PCell',
        typeInfo: '.PCell'
      }, {
        elementName: 'SequenceReference',
        typeInfo: '.SequenceReference'
      }, {
        elementName: 'chebychev',
        typeInfo: '.Chebychev'
      }, {
        elementName: 'ParameterField',
        typeInfo: '.ParameterField'
      }, {
        elementName: 'Parameter',
        typeInfo: '.Parameter'
      }, {
        elementName: 'SetPredicate',
        typeInfo: '.SetPredicate'
      }, {
        elementName: 'SeasonalComponent',
        typeInfo: '.SeasonalComponent'
      }, {
        elementName: 'ContStats',
        typeInfo: '.ContStats'
      }, {
        elementName: 'squaredEuclidean',
        typeInfo: '.SquaredEuclidean'
      }, {
        elementName: 'Item',
        typeInfo: '.Item'
      }, {
        elementName: 'SimpleRule',
        typeInfo: '.SimpleRule'
      }, {
        elementName: 'TextModel',
        typeInfo: '.TextModel'
      }, {
        elementName: 'DocumentTermMatrix',
        typeInfo: '.DocumentTermMatrix'
      }, {
        elementName: 'ARMAPart',
        typeInfo: '.ARMAPart'
      }, {
        elementName: 'Itemset',
        typeInfo: '.Itemset'
      }, {
        elementName: 'TimeSeriesModel',
        typeInfo: '.TimeSeriesModel'
      }, {
        elementName: 'ItemRef',
        typeInfo: '.ItemRef'
      }, {
        elementName: 'tanimoto',
        typeInfo: '.Tanimoto'
      }, {
        elementName: 'GARCHPart',
        typeInfo: '.GARCHPart'
      }, {
        elementName: 'TargetValueStats',
        typeInfo: '.TargetValueStats'
      }, {
        elementName: 'KNNInputs',
        typeInfo: '.KNNInputs'
      }, {
        elementName: 'Categories',
        typeInfo: '.Categories'
      }, {
        elementName: 'TimeCycle',
        typeInfo: '.TimeCycle'
      }, {
        elementName: 'NormalDistributionForBN',
        typeInfo: '.NormalDistributionForBN'
      }, {
        elementName: 'PPCell',
        typeInfo: '.PPCell'
      }, {
        elementName: 'Indices',
        typeInfo: {
          type: 'list',
          baseTypeInfo: 'Int'
        }
      }, {
        elementName: 'BoundaryValues',
        typeInfo: '.BoundaryValues'
      }, {
        elementName: 'AssociationRule',
        typeInfo: '.AssociationRule'
      }, {
        elementName: 'DiscrStats',
        typeInfo: '.DiscrStats'
      }, {
        elementName: 'ClusteringField',
        typeInfo: '.ClusteringField'
      }, {
        elementName: 'XCoordinates',
        typeInfo: '.XCoordinates'
      }, {
        elementName: 'UniformDistribution',
        typeInfo: '.UniformDistribution'
      }, {
        elementName: 'Comparisons',
        typeInfo: '.Comparisons'
      }, {
        elementName: 'ParamMatrix',
        typeInfo: '.ParamMatrix'
      }, {
        elementName: 'Coefficient',
        typeInfo: '.Coefficient'
      }, {
        elementName: 'VarianceCoefficients',
        typeInfo: '.VarianceCoefficients'
      }, {
        elementName: 'INT-SparseArray',
        typeInfo: '.INTSparseArray'
      }, {
        elementName: 'CountTable',
        typeInfo: '.COUNTTABLETYPE'
      }, {
        elementName: 'Delimiter',
        typeInfo: '.Delimiter'
      }, {
        elementName: 'cityBlock',
        typeInfo: '.CityBlock'
      }, {
        elementName: 'NumericPredictor',
        typeInfo: '.NumericPredictor'
      }, {
        elementName: 'jaccard',
        typeInfo: '.Jaccard'
      }, {
        elementName: 'TransferFunctionValues',
        typeInfo: '.TransferFunctionValues'
      }, {
        elementName: 'StateSpaceModel',
        typeInfo: '.StateSpaceModel'
      }, {
        elementName: 'OutlierEffect',
        typeInfo: '.OutlierEffect'
      }, {
        elementName: 'ResidualSquareCoefficients',
        typeInfo: '.ResidualSquareCoefficients'
      }, {
        elementName: 'KalmanState',
        typeInfo: '.KalmanState'
      }, {
        elementName: 'Attribute',
        typeInfo: '.Attribute'
      }, {
        elementName: 'SetReference',
        typeInfo: '.SetReference'
      }, {
        elementName: 'MatCell',
        typeInfo: '.MatCell'
      }, {
        elementName: 'AssociationModel',
        typeInfo: '.AssociationModel'
      }, {
        elementName: 'Characteristic',
        typeInfo: '.Characteristic'
      }, {
        elementName: 'False',
        typeInfo: '.False'
      }, {
        elementName: 'ExponentialSmoothing',
        typeInfo: '.ExponentialSmoothing'
      }, {
        elementName: 'Level',
        typeInfo: '.Level'
      }, {
        elementName: 'row',
        typeInfo: '.Row'
      }, {
        elementName: 'Lag',
        typeInfo: '.Lag'
      }, {
        elementName: 'Upper',
        typeInfo: '.Upper'
      }, {
        elementName: 'Mean',
        typeInfo: '.Mean'
      }, {
        elementName: 'CorrelationValues',
        typeInfo: '.CorrelationValues'
      }, {
        elementName: 'ARDSquaredExponentialKernel',
        typeInfo: '.ARDSquaredExponentialKernel'
      }, {
        elementName: 'OptimumLiftGraph',
        typeInfo: '.OptimumLiftGraph'
      }, {
        elementName: 'NumericInfo',
        typeInfo: '.NumericInfo'
      }, {
        elementName: 'ParentValue',
        typeInfo: '.ParentValue'
      }, {
        elementName: 'FieldValueCount',
        typeInfo: '.FieldValueCount'
      }, {
        elementName: 'BlockIndicator',
        typeInfo: '.BlockIndicator'
      }, {
        elementName: 'Quantile',
        typeInfo: '.Quantile'
      }, {
        elementName: 'Header',
        typeInfo: '.Header'
      }, {
        elementName: 'AnyDistribution',
        typeInfo: '.AnyDistribution'
      }, {
        elementName: 'Decision',
        typeInfo: '.Decision'
      }, {
        elementName: 'DerivedField',
        typeInfo: '.DerivedField'
      }, {
        elementName: 'FieldColumnPair',
        typeInfo: '.FieldColumnPair'
      }, {
        elementName: 'PCovMatrix',
        typeInfo: '.PCovMatrix'
      }, {
        elementName: 'BaselineModel',
        typeInfo: '.BaselineModel'
      }, {
        elementName: 'NeuralInputs',
        typeInfo: '.NeuralInputs'
      }, {
        elementName: 'CovariateList',
        typeInfo: '.CovariateList'
      }, {
        elementName: 'REAL-SparseArray',
        typeInfo: '.REALSparseArray'
      }, {
        elementName: 'TimeSeries',
        typeInfo: '.TimeSeries'
      }, {
        elementName: 'MA',
        typeInfo: '.MA'
      }, {
        elementName: 'ModelStats',
        typeInfo: '.ModelStats'
      }, {
        elementName: 'TableLocator',
        typeInfo: '.TableLocator'
      }, {
        elementName: 'GeneralRegressionModel',
        typeInfo: '.GeneralRegressionModel'
      }, {
        elementName: 'NeuralOutputs',
        typeInfo: '.NeuralOutputs'
      }, {
        elementName: 'NormDiscrete',
        typeInfo: '.NormDiscrete'
      }, {
        elementName: 'RegressionModel',
        typeInfo: '.RegressionModel'
      }, {
        elementName: 'AbsoluteExponentialKernel',
        typeInfo: '.AbsoluteExponentialKernel'
      }, {
        elementName: 'MultivariateStat',
        typeInfo: '.MultivariateStat'
      }, {
        elementName: 'MissingValueWeights',
        typeInfo: '.MissingValueWeights'
      }, {
        elementName: 'RadialBasisKernel',
        typeInfo: '.RadialBasisKernel'
      }, {
        elementName: 'TrainingInstances',
        typeInfo: '.TrainingInstances'
      }, {
        elementName: 'MapValues',
        typeInfo: '.MapValues'
      }, {
        elementName: 'Aggregate',
        typeInfo: '.Aggregate'
      }, {
        elementName: 'Decisions',
        typeInfo: '.Decisions'
      }, {
        elementName: 'VerificationField',
        typeInfo: '.VerificationField'
      }, {
        elementName: 'Anova',
        typeInfo: '.Anova'
      }, {
        elementName: 'SeasonalFactor',
        typeInfo: '.SeasonalFactor'
      }, {
        elementName: 'ClassLabels',
        typeInfo: '.ClassLabels'
      }, {
        elementName: 'Taxonomy',
        typeInfo: '.Taxonomy'
      }, {
        elementName: 'Targets',
        typeInfo: '.Targets'
      }, {
        elementName: 'RuleSelectionMethod',
        typeInfo: '.RuleSelectionMethod'
      }, {
        elementName: 'True',
        typeInfo: '.True'
      }, {
        elementName: 'DynamicRegressor',
        typeInfo: '.DynamicRegressor'
      }, {
        elementName: 'SimplePredicate',
        typeInfo: '.SimplePredicate'
      }, {
        elementName: 'PCovCell',
        typeInfo: '.PCovCell'
      }, {
        elementName: 'Characteristics',
        typeInfo: '.Characteristics'
      }, {
        elementName: 'binarySimilarity',
        typeInfo: '.BinarySimilarity'
      }, {
        elementName: 'TextModelNormalization',
        typeInfo: '.TextModelNormalization'
      }, {
        elementName: 'ClusteringModel',
        typeInfo: '.ClusteringModel'
      }, {
        elementName: 'Sequence',
        typeInfo: '.Sequence'
      }, {
        elementName: 'ResultField',
        typeInfo: '.ResultField'
      }, {
        elementName: 'TransitionMatrix',
        typeInfo: '.TransitionMatrix'
      }, {
        elementName: 'MaximumLikelihoodStat',
        typeInfo: '.MaximumLikelihoodStat'
      }, {
        elementName: 'Node',
        typeInfo: '.Node'
      }, {
        elementName: 'TextModelSimiliarity',
        typeInfo: '.TextModelSimiliarity'
      }, {
        elementName: 'EventValues',
        typeInfo: '.EventValues'
      }, {
        elementName: 'TestDistributions',
        typeInfo: '.TestDistributions'
      }, {
        elementName: 'DiscreteNode',
        typeInfo: '.DiscreteNode'
      }, {
        elementName: 'ConfusionMatrix',
        typeInfo: '.ConfusionMatrix'
      }, {
        elementName: 'minkowski',
        typeInfo: '.Minkowski'
      }, {
        elementName: 'LiftData',
        typeInfo: '.LiftData'
      }, {
        elementName: 'TargetValue',
        typeInfo: '.TargetValue'
      }, {
        elementName: 'TextCorpus',
        typeInfo: '.TextCorpus'
      }, {
        elementName: 'MultivariateStats',
        typeInfo: '.MultivariateStats'
      }, {
        elementName: 'NeuralInput',
        typeInfo: '.NeuralInput'
      }, {
        elementName: 'FinalTheta',
        typeInfo: '.FinalTheta'
      }, {
        elementName: 'NearestNeighborModel',
        typeInfo: '.NearestNeighborModel'
      }, {
        elementName: 'PartitionFieldStats',
        typeInfo: '.PartitionFieldStats'
      }, {
        elementName: 'MiningModel',
        typeInfo: '.MiningModel'
      }, {
        elementName: 'ModelExplanation',
        typeInfo: '.ModelExplanation'
      }, {
        elementName: 'NonseasonalComponent',
        typeInfo: '.NonseasonalComponent'
      }, {
        elementName: 'Predictor',
        typeInfo: '.Predictor'
      }, {
        elementName: 'TimeAnchor',
        typeInfo: '.TimeAnchor'
      }, {
        elementName: 'InstanceFields',
        typeInfo: '.InstanceFields'
      }, {
        elementName: 'ContinuousNode',
        typeInfo: '.ContinuousNode'
      }, {
        elementName: 'Application',
        typeInfo: '.Application'
      }, {
        elementName: 'UnivariateStats',
        typeInfo: '.UnivariateStats'
      }, {
        elementName: 'MeasurementMatrix',
        typeInfo: '.MeasurementMatrix'
      }, {
        elementName: 'GeneralizedExponentialKernel',
        typeInfo: '.GeneralizedExponentialKernel'
      }, {
        elementName: 'Correlations',
        typeInfo: '.Correlations'
      }, {
        elementName: 'FinalPredictedNoise',
        typeInfo: '.FinalPredictedNoise'
      }, {
        elementName: 'MACoefficients',
        typeInfo: '.MACoefficients'
      }, {
        elementName: 'ValueProbability',
        typeInfo: '.ValueProbability'
      }, {
        elementName: 'Lambda',
        typeInfo: '.Lambda'
      }, {
        elementName: 'ClusteringModelQuality',
        typeInfo: '.ClusteringModelQuality'
      }, {
        elementName: 'Seasonality_ExpoSmooth',
        typeInfo: '.SeasonalityExpoSmooth'
      }, {
        elementName: 'SeasonalTrendDecomposition',
        typeInfo: 'AnyType'
      }, {
        elementName: 'DataDictionary',
        typeInfo: '.DataDictionary'
      }, {
        elementName: 'ChildParent',
        typeInfo: '.ChildParent'
      }, {
        elementName: 'BoundaryValueMeans',
        typeInfo: '.BoundaryValueMeans'
      }, {
        elementName: 'OutputField',
        typeInfo: '.OutputField'
      }, {
        elementName: 'BaselineStratum',
        typeInfo: '.BaselineStratum'
      }, {
        elementName: 'NeuralOutput',
        typeInfo: '.NeuralOutput'
      }, {
        elementName: 'ROCGraph',
        typeInfo: '.ROCGraph'
      }, {
        elementName: 'DecisionTree',
        typeInfo: '.DecisionTree'
      }]
  };
  return {
    PMML: PMML
  };
};
if (typeof define === 'function' && define.amd) {
  define([], PMML_Module_Factory);
}
else {
  var PMML_Module = PMML_Module_Factory();
  if (typeof module !== 'undefined' && module.exports) {
    module.exports.PMML = PMML_Module.PMML;
  }
  else {
    var PMML = PMML_Module.PMML;
  }
}